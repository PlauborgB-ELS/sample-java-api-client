/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.api;

import com.elsevier.pure.api.sample.stubs.invoker.ApiException;
import com.elsevier.pure.api.sample.stubs.model.ClassificationRefList;
import com.elsevier.pure.api.sample.stubs.model.ContentRefListResult;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganization;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationList;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationListResult;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationRefList;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationsQuery;
import java.io.File;
import com.elsevier.pure.api.sample.stubs.model.KeywordGroupConfigurationList;
import com.elsevier.pure.api.sample.stubs.model.LocalesList;
import com.elsevier.pure.api.sample.stubs.model.Note;
import com.elsevier.pure.api.sample.stubs.model.NoteListResult;
import com.elsevier.pure.api.sample.stubs.model.OrderingsList;
import com.elsevier.pure.api.sample.stubs.model.ProblemDetails;
import java.util.UUID;
import com.elsevier.pure.api.sample.stubs.model.UploadedFile;
import com.elsevier.pure.api.sample.stubs.model.WorkflowListResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalOrganizationApi
 */
@Ignore
public class ExternalOrganizationApiTest {

    private final ExternalOrganizationApi api = new ExternalOrganizationApi();

    
    /**
     * Create external organization
     *
     * Create external organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        ExternalOrganization externalOrganization = null;
        ExternalOrganization response = api.create(externalOrganization);

        // TODO: test validations
    }
    
    /**
     * Create note
     *
     * Create note and associate it with an external organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNoteTest() throws ApiException {
        UUID uuid = null;
        Note note = null;
        Note response = api.createNote(uuid, note);

        // TODO: test validations
    }
    
    /**
     * Delete external organization
     *
     * Delete external organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        UUID uuid = null;
        api.delete(uuid);

        // TODO: test validations
    }
    
    /**
     * Lists all dependents to the external organization
     *
     * Lists all dependents to the external organization with the specified UUID. If the user dont have access to view all the dependent content, an authorization error will be thrown. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dependentsTest() throws ApiException {
        UUID uuid = null;
        Boolean verbose = null;
        ContentRefListResult response = api.dependents(uuid, verbose);

        // TODO: test validations
    }
    
    /**
     * Upload file to a specific external organization
     *
     * Uploads file for the external organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fileUploadsTest() throws ApiException {
        File body = null;
        String contentType = null;
        UploadedFile response = api.fileUploads(body, contentType);

        // TODO: test validations
    }
    
    /**
     * Get external organization
     *
     * Get external organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        UUID uuid = null;
        ExternalOrganization response = api.get(uuid);

        // TODO: test validations
    }
    
    /**
     * A list of allowed address countries
     *
     * Get a list of allowed countries that can be used for the &#39;address.country&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressCountriesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressCountries();

        // TODO: test validations
    }
    
    /**
     * A list of allowed address subdivisions
     *
     * Get a list of allowed subdivisions that can be used for the &#39;address.subdivisions&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressSubdivisionsTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressSubdivisions();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classified identifier types
     *
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedClassifiedIdentifierTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedClassifiedIdentifierTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classified identifier types
     *
     * Get a list of allowed classified image types that can be used for the &#39;images.type&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedClassifiedImageTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedClassifiedImageTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed document licenses
     *
     * Get a list of allowed document licenses that can be used for the &#39;documents.license&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedDocumentLicensesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedDocumentLicenses();

        // TODO: test validations
    }
    
    /**
     * A list of allowed document types
     *
     * Get a list of allowed document types that can be used for the &#39;documents.type&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedDocumentTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedDocumentTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the specified keyword group
     *
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedKeywordGroupConfigurationClassificationsTest() throws ApiException {
        Long id = null;
        ClassificationRefList response = api.getAllowedKeywordGroupConfigurationClassifications(id);

        // TODO: test validations
    }
    
    /**
     * A list of keyword group configurations
     *
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedKeywordGroupConfigurationsTest() throws ApiException {
        KeywordGroupConfigurationList response = api.getAllowedKeywordGroupConfigurations();

        // TODO: test validations
    }
    
    /**
     * A list of allowed link types
     *
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedLinkTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedLinkTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed locales in localized strings
     *
     * Get a list of allowed locales that can be used when submitting localized string entities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedLocalesTest() throws ApiException {
        LocalesList response = api.getAllowedLocales();

        // TODO: test validations
    }
    
    /**
     * A list of allowed nature types
     *
     * Get a list of allowed nature types that can be used for the &#39;natureTypes&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedNatureTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedNatureTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed external organization types
     *
     * Get a list of allowed types that can be used for the &#39;type&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed workflow steps
     *
     * Get a list of allowed workflow steps that can be used for the &#39;workflow&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedWorkflowStepsTest() throws ApiException {
        WorkflowListResult response = api.getAllowedWorkflowSteps();

        // TODO: test validations
    }
    
    /**
     * Get file from the external organization
     *
     * Get file from the external organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        UUID uuid = null;
        String fileId = null;
        File response = api.getFile(uuid, fileId);

        // TODO: test validations
    }
    
    /**
     * Lists available orderings
     *
     * Lists all orderings available to the external organization endpoint. These values can be used by the order parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderingsTest() throws ApiException {
        OrderingsList response = api.getOrderings();

        // TODO: test validations
    }
    
    /**
     * Lists all external organizations
     *
     * Lists all external organizations in the Pure instance. If you need to filter the external organizations returned, see the POST version which supports additional filtering.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Integer size = null;
        Integer offset = null;
        String order = null;
        ExternalOrganizationListResult response = api.list(size, offset, order);

        // TODO: test validations
    }
    
    /**
     * Lists notes
     *
     * Lists notes associated with an external organization ordered by date (nulls last)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNotesTest() throws ApiException {
        UUID uuid = null;
        Integer size = null;
        Integer offset = null;
        NoteListResult response = api.listNotes(uuid, size, offset);

        // TODO: test validations
    }
    
    /**
     * Merge external organizations
     *
     * Merge a list of external organizations together. Note that this operation is irreversible
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeTest() throws ApiException {
        ExternalOrganizationRefList externalOrganizationRefList = null;
        ExternalOrganization response = api.merge(externalOrganizationRefList);

        // TODO: test validations
    }
    
    /**
     * Preview deduplication of external organizations
     *
     * Runs through a list external organizations and returns the deduplicated and merged organizations. The operation does not touch the Pure database
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void previewDeduplicationTest() throws ApiException {
        ExternalOrganizationList externalOrganizationList = null;
        ExternalOrganizationListResult response = api.previewDeduplication(externalOrganizationList);

        // TODO: test validations
    }
    
    /**
     * Query operation for external organizations
     *
     * Lists external organizations in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        ExternalOrganizationsQuery externalOrganizationsQuery = null;
        ExternalOrganizationListResult response = api.query(externalOrganizationsQuery);

        // TODO: test validations
    }
    
    /**
     * Update external organization
     *
     * Update external organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UUID uuid = null;
        ExternalOrganization externalOrganization = null;
        ExternalOrganization response = api.update(uuid, externalOrganization);

        // TODO: test validations
    }
    
}
