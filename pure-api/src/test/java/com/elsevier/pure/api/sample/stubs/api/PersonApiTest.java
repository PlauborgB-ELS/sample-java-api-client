/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.api;

import com.elsevier.pure.api.sample.stubs.invoker.ApiException;
import com.elsevier.pure.api.sample.stubs.model.ClassificationRefList;
import java.io.File;
import com.elsevier.pure.api.sample.stubs.model.HighlightedContent;
import com.elsevier.pure.api.sample.stubs.model.KeywordGroupConfigurationList;
import com.elsevier.pure.api.sample.stubs.model.LocalesList;
import com.elsevier.pure.api.sample.stubs.model.Note;
import com.elsevier.pure.api.sample.stubs.model.NoteListResult;
import com.elsevier.pure.api.sample.stubs.model.OrderingsList;
import com.elsevier.pure.api.sample.stubs.model.Person;
import com.elsevier.pure.api.sample.stubs.model.PersonListResult;
import com.elsevier.pure.api.sample.stubs.model.PersonSuperviseeAssociationListResult;
import com.elsevier.pure.api.sample.stubs.model.PersonsQuery;
import com.elsevier.pure.api.sample.stubs.model.ProblemDetails;
import java.util.UUID;
import com.elsevier.pure.api.sample.stubs.model.UploadedFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PersonApi
 */
@Ignore
public class PersonApiTest {

    private final PersonApi api = new PersonApi();

    
    /**
     * Create person
     *
     * Create person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        Person person = null;
        Person response = api.create(person);

        // TODO: test validations
    }
    
    /**
     * Create note
     *
     * Create note and associate it with a person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNoteTest() throws ApiException {
        UUID uuid = null;
        Note note = null;
        Note response = api.createNote(uuid, note);

        // TODO: test validations
    }
    
    /**
     * Delete person
     *
     * Delete person with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        UUID uuid = null;
        api.delete(uuid);

        // TODO: test validations
    }
    
    /**
     * Upload file to a specific person
     *
     * Uploads file for the person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fileUploadsTest() throws ApiException {
        File body = null;
        String contentType = null;
        UploadedFile response = api.fileUploads(body, contentType);

        // TODO: test validations
    }
    
    /**
     * Get person
     *
     * Get person with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        UUID uuid = null;
        Person response = api.get(uuid);

        // TODO: test validations
    }
    
    /**
     * A list of the allowed values for field of study
     *
     * Get a list of classifications that can be used for the &#39;academicQualifications.fieldOfStudy&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAcademicQualificationsFieldOfStudiesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAcademicQualificationsFieldOfStudies();

        // TODO: test validations
    }
    
    /**
     * A list of allowed academic qualification types for persons
     *
     * Get a list of allowed academic qualification types for persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAcademicQualificationsTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAcademicQualificationsTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed address countries
     *
     * Get a list of allowed countries that can be used for the &#39;addresses.country&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressCountriesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressCountries();

        // TODO: test validations
    }
    
    /**
     * A list of allowed subdivisions
     *
     * Get a list of allowed subdivisions can be used for the &#39;subdivision&#39; attribute of person organization associations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressSubdivisionsTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressSubdivisions();

        // TODO: test validations
    }
    
    /**
     * A list of allowed address types
     *
     * Get a list of allowed address types that can be used for the &#39;addresses.type&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classified identifier types
     *
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedClassifiedIdentifierTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedClassifiedIdentifierTypes();

        // TODO: test validations
    }
    
    /**
     * A list of the allowed values for appointments
     *
     * Get a list of classifications that can be used for the &#39;externalPositions.appointment&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedExternalPositionsAppointmentsTest() throws ApiException {
        ClassificationRefList response = api.getAllowedExternalPositionsAppointments();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the gender property
     *
     * Get a list of classifications that can be used when submitting the person gender property.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedGendersTest() throws ApiException {
        ClassificationRefList response = api.getAllowedGenders();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the specified keyword group
     *
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedKeywordGroupConfigurationClassificationsTest() throws ApiException {
        Long id = null;
        ClassificationRefList response = api.getAllowedKeywordGroupConfigurationClassifications(id);

        // TODO: test validations
    }
    
    /**
     * A list of keyword group configurations
     *
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedKeywordGroupConfigurationsTest() throws ApiException {
        KeywordGroupConfigurationList response = api.getAllowedKeywordGroupConfigurations();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the leave of absence property
     *
     * Get a list of classifications that can be used when submitting the leaveOfAbsence property.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedLeavesOfAbsenceClassificationsTest() throws ApiException {
        ClassificationRefList response = api.getAllowedLeavesOfAbsenceClassifications();

        // TODO: test validations
    }
    
    /**
     * A list of allowed link types
     *
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedLinkTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedLinkTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed locales in localized strings
     *
     * Get a list of allowed locales that can be used when submitting localized string entities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedLocalesTest() throws ApiException {
        LocalesList response = api.getAllowedLocales();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for classified names
     *
     * Get a list of allowed classifications that can be used when submitting a classified name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedNamesTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedNamesTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the nationalities property
     *
     * Get a list of classifications that can be used when submitting the nationality property.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedNationalitiesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedNationalities();

        // TODO: test validations
    }
    
    /**
     * A list of allowed email types
     *
     * Get a list of allowed email types for person organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPersonOrganizationAssociationsEmailTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPersonOrganizationAssociationsEmailTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed employment types
     *
     * Get a list of allowed employment types for person organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPersonOrganizationAssociationsEmploymentTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPersonOrganizationAssociationsEmploymentTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed job titles
     *
     * Get a list of allowed job titles for person organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPersonOrganizationAssociationsJobTitlesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPersonOrganizationAssociationsJobTitles();

        // TODO: test validations
    }
    
    /**
     * A list of allowed phone number types
     *
     * Get a list of allowed phone numbers types for person organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPersonOrganizationAssociationsPhoneNumberTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPersonOrganizationAssociationsPhoneNumberTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed supervisor roles
     *
     * Get a list of allowed supervisor roles for person organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPersonOrganizationAssociationsSupervisorRolesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPersonOrganizationAssociationsSupervisorRoles();

        // TODO: test validations
    }
    
    /**
     * A list of allowed web address types
     *
     * Get a list of allowed web address types for person organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPersonOrganizationAssociationsWebAddressTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPersonOrganizationAssociationsWebAddressTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed country classifications for private address
     *
     * Get a list of allowed country classifications for private address on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPrivateAddressCountriesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPrivateAddressCountries();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the profile information property
     *
     * Get a list of classifications that can be used when submitting an entry in profile information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedProfileInformationTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedProfileInformationTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed photo types
     *
     * Get a list of allowed photo types that can be used for the &#39;profilePhotos.type&#39; attribute of persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedProfilePhotoTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedProfilePhotoTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed types for person profile photos
     *
     * Get a list of allowed types for person profile photos
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedProfilePhotosTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedProfilePhotosTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed contract types
     *
     * Get a list of allowed contract types for staff organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedStaffOrganizationAssociationsContractTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedStaffOrganizationAssociationsContractTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed staff types
     *
     * Get a list of allowed staff types for staff organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedStaffOrganizationAssociationsStaffTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedStaffOrganizationAssociationsStaffTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed employment types
     *
     * Get a list of allowed employment types for student organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedStudentAssociationsEmploymentTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedStudentAssociationsEmploymentTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the titles property
     *
     * Get a list of classifications that can be used when submitting a title.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedTitlesTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedTitlesTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed employment types
     *
     * Get a list of allowed employment types for visiting scholar organisation associations on persons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedVisitingScholarAssociationsEmploymentTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedVisitingScholarAssociationsEmploymentTypes();

        // TODO: test validations
    }
    
    /**
     * Get file from the person
     *
     * Get file from the person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        UUID uuid = null;
        String fileId = null;
        File response = api.getFile(uuid, fileId);

        // TODO: test validations
    }
    
    /**
     * Get highlighted content
     *
     * Get highlighted content for the person with the specific UUID. Highlights are only available for editorial types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHighlightedContentTest() throws ApiException {
        UUID uuid = null;
        HighlightedContent response = api.getHighlightedContent(uuid);

        // TODO: test validations
    }
    
    /**
     * Lists available orderings
     *
     * Lists all orderings available to the person endpoint. These values can be used by the order parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderingsTest() throws ApiException {
        OrderingsList response = api.getOrderings();

        // TODO: test validations
    }
    
    /**
     * Lists all persons
     *
     * Lists all persons in the Pure instance. If you need to filter the persons returned, see the POST version which supports additional filtering.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Integer size = null;
        Integer offset = null;
        String order = null;
        PersonListResult response = api.list(size, offset, order);

        // TODO: test validations
    }
    
    /**
     * Lists notes
     *
     * Lists notes associated with an person ordered by date (nulls last)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNotesTest() throws ApiException {
        UUID uuid = null;
        Integer size = null;
        Integer offset = null;
        NoteListResult response = api.listNotes(uuid, size, offset);

        // TODO: test validations
    }
    
    /**
     * Query operation for persons
     *
     * Lists persons in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        PersonsQuery personsQuery = null;
        PersonListResult response = api.query(personsQuery);

        // TODO: test validations
    }
    
    /**
     * person supervisees
     *
     * Find supervisees of a person by their specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void superviseeTest() throws ApiException {
        UUID uuid = null;
        PersonSuperviseeAssociationListResult response = api.supervisee(uuid);

        // TODO: test validations
    }
    
    /**
     * Update person
     *
     * Update person with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UUID uuid = null;
        Person person = null;
        Person response = api.update(uuid, person);

        // TODO: test validations
    }
    
    /**
     * Update highlighted content
     *
     * Update highlighted content references. Add an empty array of references for a content type to not highlight any items of this type. Types that are not present will be ignored. Highlights can only be updated for editorial types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHighlightedContentTest() throws ApiException {
        UUID uuid = null;
        HighlightedContent highlightedContent = null;
        HighlightedContent response = api.updateHighlightedContent(uuid, highlightedContent);

        // TODO: test validations
    }
    
}
