/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.api;

import com.elsevier.pure.api.sample.stubs.invoker.ApiException;
import com.elsevier.pure.api.sample.stubs.model.ClassificationRefList;
import com.elsevier.pure.api.sample.stubs.model.ContentRefListResult;
import java.io.File;
import com.elsevier.pure.api.sample.stubs.model.KeywordGroupConfigurationList;
import com.elsevier.pure.api.sample.stubs.model.LocalesList;
import com.elsevier.pure.api.sample.stubs.model.Note;
import com.elsevier.pure.api.sample.stubs.model.NoteListResult;
import com.elsevier.pure.api.sample.stubs.model.OrderingsList;
import com.elsevier.pure.api.sample.stubs.model.Organization;
import com.elsevier.pure.api.sample.stubs.model.OrganizationListResult;
import com.elsevier.pure.api.sample.stubs.model.OrganizationsQuery;
import com.elsevier.pure.api.sample.stubs.model.ProblemDetails;
import java.util.UUID;
import com.elsevier.pure.api.sample.stubs.model.UploadedFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationApi
 */
@Ignore
public class OrganizationApiTest {

    private final OrganizationApi api = new OrganizationApi();

    
    /**
     * Create organization
     *
     * Create organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        Organization organization = null;
        Organization response = api.create(organization);

        // TODO: test validations
    }
    
    /**
     * Create note
     *
     * Create note and associate it with an organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNoteTest() throws ApiException {
        UUID uuid = null;
        Note note = null;
        Note response = api.createNote(uuid, note);

        // TODO: test validations
    }
    
    /**
     * Delete organization
     *
     * Delete organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        UUID uuid = null;
        api.delete(uuid);

        // TODO: test validations
    }
    
    /**
     * Lists all dependents to the organization
     *
     * Lists all dependents to the organization with the specified UUID. If the user dont have access to view all the dependent content, an authorization error will be thrown. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dependentsTest() throws ApiException {
        UUID uuid = null;
        Boolean verbose = null;
        ContentRefListResult response = api.dependents(uuid, verbose);

        // TODO: test validations
    }
    
    /**
     * Upload file to a specific organization
     *
     * Uploads file for the organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fileUploadsTest() throws ApiException {
        File body = null;
        String contentType = null;
        UploadedFile response = api.fileUploads(body, contentType);

        // TODO: test validations
    }
    
    /**
     * Get organization
     *
     * Get organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        UUID uuid = null;
        Organization response = api.get(uuid);

        // TODO: test validations
    }
    
    /**
     * A list of allowed address countries
     *
     * Get a list of allowed countries that can be used for the &#39;addresses.country&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressCountriesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressCountries();

        // TODO: test validations
    }
    
    /**
     * A list of allowed address subdivisions
     *
     * Get a list of allowed subdivisions that can be used for the &#39;addresses.subdivisions&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressSubdivisionsTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressSubdivisions();

        // TODO: test validations
    }
    
    /**
     * A list of allowed address types
     *
     * Get a list of allowed address types that can be used for the &#39;addresses.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedAddressTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classified identifier types
     *
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedClassifiedIdentifierTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedClassifiedIdentifierTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classified identifier types
     *
     * Get a list of allowed classified photo types that can be used for the &#39;photos.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedClassifiedImageTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedClassifiedImageTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed cost centers
     *
     * Get a list of allowed cost centers that can be used for the &#39;costCenters&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedCostCentersTest() throws ApiException {
        ClassificationRefList response = api.getAllowedCostCenters();

        // TODO: test validations
    }
    
    /**
     * A list of allowed e-mail types
     *
     * Get a list of allowed e-mail types that can be used for the &#39;emails.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedEmailTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedEmailTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed classifications for the specified keyword group
     *
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedKeywordGroupConfigurationClassificationsTest() throws ApiException {
        Long id = null;
        ClassificationRefList response = api.getAllowedKeywordGroupConfigurationClassifications(id);

        // TODO: test validations
    }
    
    /**
     * A list of keyword group configurations
     *
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedKeywordGroupConfigurationsTest() throws ApiException {
        KeywordGroupConfigurationList response = api.getAllowedKeywordGroupConfigurations();

        // TODO: test validations
    }
    
    /**
     * A list of allowed locales in localized strings
     *
     * Get a list of allowed locales that can be used when submitting localized string entities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedLocalesTest() throws ApiException {
        LocalesList response = api.getAllowedLocales();

        // TODO: test validations
    }
    
    /**
     * A list of allowed name variant types
     *
     * Get a list of allowed name variant types that can be used for the &#39;nameVariants.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedNameVariantTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedNameVariantTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed phone number types
     *
     * Get a list of allowed phone number types that can be used for the &#39;phoneNumbers.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPhoneNumberTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPhoneNumberTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed photo types
     *
     * Get a list of allowed photo types that can be used for the &#39;photos.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedPhotoTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedPhotoTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed profile information types
     *
     * Get a list of allowed profile information types that can be used for the &#39;profileInformations.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedProfileInformationTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedProfileInformationTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed organization types
     *
     * Get a list of allowed types that can be used for the &#39;type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed web address types
     *
     * Get a list of allowed web address types that can be used for the &#39;webAddresses.type&#39; attribute of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedWebAddressTypesTest() throws ApiException {
        ClassificationRefList response = api.getAllowedWebAddressTypes();

        // TODO: test validations
    }
    
    /**
     * Get file from the organization
     *
     * Get file from the organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        UUID uuid = null;
        String fileId = null;
        File response = api.getFile(uuid, fileId);

        // TODO: test validations
    }
    
    /**
     * Lists available orderings
     *
     * Lists all orderings available to the organization endpoint. These values can be used by the order parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderingsTest() throws ApiException {
        OrderingsList response = api.getOrderings();

        // TODO: test validations
    }
    
    /**
     * Lists all organizations
     *
     * Lists all organizations in the Pure instance. If you need to filter the organizations returned, see the POST version which supports additional filtering.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Integer size = null;
        Integer offset = null;
        String order = null;
        OrganizationListResult response = api.list(size, offset, order);

        // TODO: test validations
    }
    
    /**
     * Lists notes
     *
     * Lists notes associated with an organization ordered by date (nulls last)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNotesTest() throws ApiException {
        UUID uuid = null;
        Integer size = null;
        Integer offset = null;
        NoteListResult response = api.listNotes(uuid, size, offset);

        // TODO: test validations
    }
    
    /**
     * Query operation for organizations
     *
     * Lists organizations in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        OrganizationsQuery organizationsQuery = null;
        OrganizationListResult response = api.query(organizationsQuery);

        // TODO: test validations
    }
    
    /**
     * Update organization
     *
     * Update organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UUID uuid = null;
        Organization organization = null;
        Organization response = api.update(uuid, organization);

        // TODO: test validations
    }
    
}
