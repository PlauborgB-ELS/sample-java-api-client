/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.api;

import com.elsevier.pure.api.sample.stubs.invoker.ApiCallback;
import com.elsevier.pure.api.sample.stubs.invoker.ApiClient;
import com.elsevier.pure.api.sample.stubs.invoker.ApiException;
import com.elsevier.pure.api.sample.stubs.invoker.ApiResponse;
import com.elsevier.pure.api.sample.stubs.invoker.Configuration;
import com.elsevier.pure.api.sample.stubs.invoker.Pair;
import com.elsevier.pure.api.sample.stubs.invoker.ProgressRequestBody;
import com.elsevier.pure.api.sample.stubs.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.elsevier.pure.api.sample.stubs.model.ClassificationRefList;
import java.io.File;
import com.elsevier.pure.api.sample.stubs.model.HighlightedContent;
import com.elsevier.pure.api.sample.stubs.model.KeywordGroupConfigurationList;
import com.elsevier.pure.api.sample.stubs.model.LocalesList;
import com.elsevier.pure.api.sample.stubs.model.Note;
import com.elsevier.pure.api.sample.stubs.model.NoteListResult;
import com.elsevier.pure.api.sample.stubs.model.OrderingsList;
import com.elsevier.pure.api.sample.stubs.model.Person;
import com.elsevier.pure.api.sample.stubs.model.PersonListResult;
import com.elsevier.pure.api.sample.stubs.model.PersonSuperviseeAssociationListResult;
import com.elsevier.pure.api.sample.stubs.model.PersonsQuery;
import com.elsevier.pure.api.sample.stubs.model.ProblemDetails;
import java.util.UUID;
import com.elsevier.pure.api.sample.stubs.model.UploadedFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {
    private ApiClient localVarApiClient;

    public PersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for create
     * @param person The content to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(Person person, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = person;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(Person person, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling create(Async)");
        }
        

        okhttp3.Call localVarCall = createCall(person, _callback);
        return localVarCall;

    }

    /**
     * Create person
     * Create person
     * @param person The content to create (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Person create(Person person) throws ApiException {
        ApiResponse<Person> localVarResp = createWithHttpInfo(person);
        return localVarResp.getData();
    }

    /**
     * Create person
     * Create person
     * @param person The content to create (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> createWithHttpInfo(Person person) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(person, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create person (asynchronously)
     * Create person
     * @param person The content to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(Person person, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(person, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNote
     * @param uuid UUID of the person to add note to (required)
     * @param note The note to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNoteCall(UUID uuid, Note note, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = note;

        // create path and map variables
        String localVarPath = "/persons/{uuid}/notes"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNoteValidateBeforeCall(UUID uuid, Note note, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createNote(Async)");
        }
        
        // verify the required parameter 'note' is set
        if (note == null) {
            throw new ApiException("Missing the required parameter 'note' when calling createNote(Async)");
        }
        

        okhttp3.Call localVarCall = createNoteCall(uuid, note, _callback);
        return localVarCall;

    }

    /**
     * Create note
     * Create note and associate it with a person
     * @param uuid UUID of the person to add note to (required)
     * @param note The note to create (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Note createNote(UUID uuid, Note note) throws ApiException {
        ApiResponse<Note> localVarResp = createNoteWithHttpInfo(uuid, note);
        return localVarResp.getData();
    }

    /**
     * Create note
     * Create note and associate it with a person
     * @param uuid UUID of the person to add note to (required)
     * @param note The note to create (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> createNoteWithHttpInfo(UUID uuid, Note note) throws ApiException {
        okhttp3.Call localVarCall = createNoteValidateBeforeCall(uuid, note, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create note (asynchronously)
     * Create note and associate it with a person
     * @param uuid UUID of the person to add note to (required)
     * @param note The note to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNoteAsync(UUID uuid, Note note, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNoteValidateBeforeCall(uuid, note, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param uuid UUID of the person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * Delete person
     * Delete person with specific UUID.
     * @param uuid UUID of the person (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void delete(UUID uuid) throws ApiException {
        deleteWithHttpInfo(uuid);
    }

    /**
     * Delete person
     * Delete person with specific UUID.
     * @param uuid UUID of the person (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete person (asynchronously)
     * Delete person with specific UUID.
     * @param uuid UUID of the person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileUploads
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileUploadsCall(File body, String contentType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/file-uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileUploadsValidateBeforeCall(File body, String contentType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileUploads(Async)");
        }
        

        okhttp3.Call localVarCall = fileUploadsCall(body, contentType, _callback);
        return localVarCall;

    }

    /**
     * Upload file to a specific person
     * Uploads file for the person
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @return UploadedFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public UploadedFile fileUploads(File body, String contentType) throws ApiException {
        ApiResponse<UploadedFile> localVarResp = fileUploadsWithHttpInfo(body, contentType);
        return localVarResp.getData();
    }

    /**
     * Upload file to a specific person
     * Uploads file for the person
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @return ApiResponse&lt;UploadedFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedFile> fileUploadsWithHttpInfo(File body, String contentType) throws ApiException {
        okhttp3.Call localVarCall = fileUploadsValidateBeforeCall(body, contentType, null);
        Type localVarReturnType = new TypeToken<UploadedFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload file to a specific person (asynchronously)
     * Uploads file for the person
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileUploadsAsync(File body, String contentType, final ApiCallback<UploadedFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileUploadsValidateBeforeCall(body, contentType, _callback);
        Type localVarReturnType = new TypeToken<UploadedFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param uuid UUID of the desired person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * Get person
     * Get person with specific UUID.
     * @param uuid UUID of the desired person (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Person get(UUID uuid) throws ApiException {
        ApiResponse<Person> localVarResp = getWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Get person
     * Get person with specific UUID.
     * @param uuid UUID of the desired person (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> getWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person (asynchronously)
     * Get person with specific UUID.
     * @param uuid UUID of the desired person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(UUID uuid, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAcademicQualificationsFieldOfStudies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAcademicQualificationsFieldOfStudiesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-academic-qualifications-field-of-studies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAcademicQualificationsFieldOfStudiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAcademicQualificationsFieldOfStudiesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of the allowed values for field of study
     * Get a list of classifications that can be used for the &#39;academicQualifications.fieldOfStudy&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAcademicQualificationsFieldOfStudies() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAcademicQualificationsFieldOfStudiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of the allowed values for field of study
     * Get a list of classifications that can be used for the &#39;academicQualifications.fieldOfStudy&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAcademicQualificationsFieldOfStudiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAcademicQualificationsFieldOfStudiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of the allowed values for field of study (asynchronously)
     * Get a list of classifications that can be used for the &#39;academicQualifications.fieldOfStudy&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAcademicQualificationsFieldOfStudiesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAcademicQualificationsFieldOfStudiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAcademicQualificationsTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAcademicQualificationsTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-allowed-academic-qualification-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAcademicQualificationsTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAcademicQualificationsTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed academic qualification types for persons
     * Get a list of allowed academic qualification types for persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAcademicQualificationsTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAcademicQualificationsTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed academic qualification types for persons
     * Get a list of allowed academic qualification types for persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAcademicQualificationsTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAcademicQualificationsTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed academic qualification types for persons (asynchronously)
     * Get a list of allowed academic qualification types for persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAcademicQualificationsTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAcademicQualificationsTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAddressCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressCountriesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-address-countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAddressCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAddressCountriesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed address countries
     * Get a list of allowed countries that can be used for the &#39;addresses.country&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAddressCountries() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAddressCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed address countries
     * Get a list of allowed countries that can be used for the &#39;addresses.country&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAddressCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAddressCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed address countries (asynchronously)
     * Get a list of allowed countries that can be used for the &#39;addresses.country&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressCountriesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAddressCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAddressSubdivisions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressSubdivisionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-address-subdivisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAddressSubdivisionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAddressSubdivisionsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed subdivisions
     * Get a list of allowed subdivisions can be used for the &#39;subdivision&#39; attribute of person organization associations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAddressSubdivisions() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAddressSubdivisionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed subdivisions
     * Get a list of allowed subdivisions can be used for the &#39;subdivision&#39; attribute of person organization associations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAddressSubdivisionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAddressSubdivisionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed subdivisions (asynchronously)
     * Get a list of allowed subdivisions can be used for the &#39;subdivision&#39; attribute of person organization associations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressSubdivisionsAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAddressSubdivisionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAddressTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-address-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAddressTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAddressTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed address types
     * Get a list of allowed address types that can be used for the &#39;addresses.type&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAddressTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAddressTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed address types
     * Get a list of allowed address types that can be used for the &#39;addresses.type&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAddressTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAddressTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed address types (asynchronously)
     * Get a list of allowed address types that can be used for the &#39;addresses.type&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAddressTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedClassifiedIdentifierTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedClassifiedIdentifierTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-classified-identifier-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedClassifiedIdentifierTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedClassifiedIdentifierTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classified identifier types
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedClassifiedIdentifierTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedClassifiedIdentifierTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classified identifier types
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedClassifiedIdentifierTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedClassifiedIdentifierTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classified identifier types (asynchronously)
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedClassifiedIdentifierTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedClassifiedIdentifierTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedExternalPositionsAppointments
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedExternalPositionsAppointmentsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-external-positions-appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedExternalPositionsAppointmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedExternalPositionsAppointmentsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of the allowed values for appointments
     * Get a list of classifications that can be used for the &#39;externalPositions.appointment&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedExternalPositionsAppointments() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedExternalPositionsAppointmentsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of the allowed values for appointments
     * Get a list of classifications that can be used for the &#39;externalPositions.appointment&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedExternalPositionsAppointmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedExternalPositionsAppointmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of the allowed values for appointments (asynchronously)
     * Get a list of classifications that can be used for the &#39;externalPositions.appointment&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedExternalPositionsAppointmentsAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedExternalPositionsAppointmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedGenders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedGendersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-genders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedGendersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedGendersCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the gender property
     * Get a list of classifications that can be used when submitting the person gender property.
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedGenders() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedGendersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the gender property
     * Get a list of classifications that can be used when submitting the person gender property.
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedGendersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedGendersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the gender property (asynchronously)
     * Get a list of classifications that can be used when submitting the person gender property.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedGendersAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedGendersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedKeywordGroupConfigurationClassifications
     * @param id Pure id of the keyword group configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationClassificationsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-keyword-group-configurations/{id}/classifications"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedKeywordGroupConfigurationClassificationsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAllowedKeywordGroupConfigurationClassifications(Async)");
        }
        

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationClassificationsCall(id, _callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the specified keyword group
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     * @param id Pure id of the keyword group configuration (required)
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedKeywordGroupConfigurationClassifications(Long id) throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedKeywordGroupConfigurationClassificationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the specified keyword group
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     * @param id Pure id of the keyword group configuration (required)
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedKeywordGroupConfigurationClassificationsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationClassificationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the specified keyword group (asynchronously)
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     * @param id Pure id of the keyword group configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationClassificationsAsync(Long id, final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationClassificationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedKeywordGroupConfigurations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-keyword-group-configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedKeywordGroupConfigurationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of keyword group configurations
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     * @return KeywordGroupConfigurationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordGroupConfigurationList getAllowedKeywordGroupConfigurations() throws ApiException {
        ApiResponse<KeywordGroupConfigurationList> localVarResp = getAllowedKeywordGroupConfigurationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of keyword group configurations
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     * @return ApiResponse&lt;KeywordGroupConfigurationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordGroupConfigurationList> getAllowedKeywordGroupConfigurationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordGroupConfigurationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of keyword group configurations (asynchronously)
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationsAsync(final ApiCallback<KeywordGroupConfigurationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordGroupConfigurationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedLeavesOfAbsenceClassifications
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLeavesOfAbsenceClassificationsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-leave-of-absense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedLeavesOfAbsenceClassificationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedLeavesOfAbsenceClassificationsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the leave of absence property
     * Get a list of classifications that can be used when submitting the leaveOfAbsence property.
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedLeavesOfAbsenceClassifications() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedLeavesOfAbsenceClassificationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the leave of absence property
     * Get a list of classifications that can be used when submitting the leaveOfAbsence property.
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedLeavesOfAbsenceClassificationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedLeavesOfAbsenceClassificationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the leave of absence property (asynchronously)
     * Get a list of classifications that can be used when submitting the leaveOfAbsence property.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLeavesOfAbsenceClassificationsAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedLeavesOfAbsenceClassificationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedLinkTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLinkTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-link-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedLinkTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedLinkTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed link types
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedLinkTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedLinkTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed link types
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedLinkTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedLinkTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed link types (asynchronously)
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLinkTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedLinkTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedLocales
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLocalesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-locales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedLocalesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedLocalesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed locales in localized strings
     * Get a list of allowed locales that can be used when submitting localized string entities.
     * @return LocalesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public LocalesList getAllowedLocales() throws ApiException {
        ApiResponse<LocalesList> localVarResp = getAllowedLocalesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed locales in localized strings
     * Get a list of allowed locales that can be used when submitting localized string entities.
     * @return ApiResponse&lt;LocalesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocalesList> getAllowedLocalesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedLocalesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LocalesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed locales in localized strings (asynchronously)
     * Get a list of allowed locales that can be used when submitting localized string entities.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLocalesAsync(final ApiCallback<LocalesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedLocalesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LocalesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedNamesTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedNamesTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-names-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedNamesTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedNamesTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for classified names
     * Get a list of allowed classifications that can be used when submitting a classified name.
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedNamesTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedNamesTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for classified names
     * Get a list of allowed classifications that can be used when submitting a classified name.
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedNamesTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedNamesTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for classified names (asynchronously)
     * Get a list of allowed classifications that can be used when submitting a classified name.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedNamesTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedNamesTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedNationalities
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedNationalitiesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-nationalities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedNationalitiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedNationalitiesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the nationalities property
     * Get a list of classifications that can be used when submitting the nationality property.
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedNationalities() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedNationalitiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the nationalities property
     * Get a list of classifications that can be used when submitting the nationality property.
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedNationalitiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedNationalitiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the nationalities property (asynchronously)
     * Get a list of classifications that can be used when submitting the nationality property.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedNationalitiesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedNationalitiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPersonOrganizationAssociationsEmailTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsEmailTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-person-organization-associations-email-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPersonOrganizationAssociationsEmailTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsEmailTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed email types
     * Get a list of allowed email types for person organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPersonOrganizationAssociationsEmailTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPersonOrganizationAssociationsEmailTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed email types
     * Get a list of allowed email types for person organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPersonOrganizationAssociationsEmailTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsEmailTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed email types (asynchronously)
     * Get a list of allowed email types for person organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsEmailTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsEmailTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPersonOrganizationAssociationsEmploymentTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsEmploymentTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-person-organization-associations-employment-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPersonOrganizationAssociationsEmploymentTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsEmploymentTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed employment types
     * Get a list of allowed employment types for person organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPersonOrganizationAssociationsEmploymentTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPersonOrganizationAssociationsEmploymentTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed employment types
     * Get a list of allowed employment types for person organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPersonOrganizationAssociationsEmploymentTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsEmploymentTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed employment types (asynchronously)
     * Get a list of allowed employment types for person organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsEmploymentTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsEmploymentTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPersonOrganizationAssociationsJobTitles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsJobTitlesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-person-organization-associations-job-titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPersonOrganizationAssociationsJobTitlesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsJobTitlesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed job titles
     * Get a list of allowed job titles for person organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPersonOrganizationAssociationsJobTitles() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPersonOrganizationAssociationsJobTitlesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed job titles
     * Get a list of allowed job titles for person organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPersonOrganizationAssociationsJobTitlesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsJobTitlesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed job titles (asynchronously)
     * Get a list of allowed job titles for person organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsJobTitlesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsJobTitlesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPersonOrganizationAssociationsPhoneNumberTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsPhoneNumberTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-person-organization-associations-phonenumber-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPersonOrganizationAssociationsPhoneNumberTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsPhoneNumberTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed phone number types
     * Get a list of allowed phone numbers types for person organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPersonOrganizationAssociationsPhoneNumberTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPersonOrganizationAssociationsPhoneNumberTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed phone number types
     * Get a list of allowed phone numbers types for person organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPersonOrganizationAssociationsPhoneNumberTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsPhoneNumberTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed phone number types (asynchronously)
     * Get a list of allowed phone numbers types for person organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsPhoneNumberTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsPhoneNumberTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPersonOrganizationAssociationsSupervisorRoles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsSupervisorRolesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-person-organization-associations-supervisor-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPersonOrganizationAssociationsSupervisorRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsSupervisorRolesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed supervisor roles
     * Get a list of allowed supervisor roles for person organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPersonOrganizationAssociationsSupervisorRoles() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPersonOrganizationAssociationsSupervisorRolesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed supervisor roles
     * Get a list of allowed supervisor roles for person organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPersonOrganizationAssociationsSupervisorRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsSupervisorRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed supervisor roles (asynchronously)
     * Get a list of allowed supervisor roles for person organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsSupervisorRolesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsSupervisorRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPersonOrganizationAssociationsWebAddressTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsWebAddressTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-person-organization-associations-webaddress-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPersonOrganizationAssociationsWebAddressTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsWebAddressTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed web address types
     * Get a list of allowed web address types for person organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPersonOrganizationAssociationsWebAddressTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPersonOrganizationAssociationsWebAddressTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed web address types
     * Get a list of allowed web address types for person organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPersonOrganizationAssociationsWebAddressTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsWebAddressTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed web address types (asynchronously)
     * Get a list of allowed web address types for person organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPersonOrganizationAssociationsWebAddressTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPersonOrganizationAssociationsWebAddressTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedPrivateAddressCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPrivateAddressCountriesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-private-address-countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedPrivateAddressCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedPrivateAddressCountriesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed country classifications for private address
     * Get a list of allowed country classifications for private address on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedPrivateAddressCountries() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedPrivateAddressCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed country classifications for private address
     * Get a list of allowed country classifications for private address on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedPrivateAddressCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedPrivateAddressCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed country classifications for private address (asynchronously)
     * Get a list of allowed country classifications for private address on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedPrivateAddressCountriesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedPrivateAddressCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedProfileInformationTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedProfileInformationTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-profile-information-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedProfileInformationTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedProfileInformationTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the profile information property
     * Get a list of classifications that can be used when submitting an entry in profile information.
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedProfileInformationTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedProfileInformationTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the profile information property
     * Get a list of classifications that can be used when submitting an entry in profile information.
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedProfileInformationTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedProfileInformationTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the profile information property (asynchronously)
     * Get a list of classifications that can be used when submitting an entry in profile information.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedProfileInformationTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedProfileInformationTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedProfilePhotoTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedProfilePhotoTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-profile-photo-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedProfilePhotoTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedProfilePhotoTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed photo types
     * Get a list of allowed photo types that can be used for the &#39;profilePhotos.type&#39; attribute of persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedProfilePhotoTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedProfilePhotoTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed photo types
     * Get a list of allowed photo types that can be used for the &#39;profilePhotos.type&#39; attribute of persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedProfilePhotoTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedProfilePhotoTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed photo types (asynchronously)
     * Get a list of allowed photo types that can be used for the &#39;profilePhotos.type&#39; attribute of persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedProfilePhotoTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedProfilePhotoTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedProfilePhotosTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedProfilePhotosTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-allowed-profile-photo-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedProfilePhotosTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedProfilePhotosTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed types for person profile photos
     * Get a list of allowed types for person profile photos
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedProfilePhotosTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedProfilePhotosTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed types for person profile photos
     * Get a list of allowed types for person profile photos
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedProfilePhotosTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedProfilePhotosTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed types for person profile photos (asynchronously)
     * Get a list of allowed types for person profile photos
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedProfilePhotosTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedProfilePhotosTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedStaffOrganizationAssociationsContractTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedStaffOrganizationAssociationsContractTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-staff-organization-associations-contract-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedStaffOrganizationAssociationsContractTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedStaffOrganizationAssociationsContractTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed contract types
     * Get a list of allowed contract types for staff organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedStaffOrganizationAssociationsContractTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedStaffOrganizationAssociationsContractTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed contract types
     * Get a list of allowed contract types for staff organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedStaffOrganizationAssociationsContractTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedStaffOrganizationAssociationsContractTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed contract types (asynchronously)
     * Get a list of allowed contract types for staff organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedStaffOrganizationAssociationsContractTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedStaffOrganizationAssociationsContractTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedStaffOrganizationAssociationsStaffTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedStaffOrganizationAssociationsStaffTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-staff-organization-associations-staff-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedStaffOrganizationAssociationsStaffTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedStaffOrganizationAssociationsStaffTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed staff types
     * Get a list of allowed staff types for staff organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedStaffOrganizationAssociationsStaffTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedStaffOrganizationAssociationsStaffTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed staff types
     * Get a list of allowed staff types for staff organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedStaffOrganizationAssociationsStaffTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedStaffOrganizationAssociationsStaffTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed staff types (asynchronously)
     * Get a list of allowed staff types for staff organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedStaffOrganizationAssociationsStaffTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedStaffOrganizationAssociationsStaffTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedStudentAssociationsEmploymentTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedStudentAssociationsEmploymentTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-student-organization-associations-employment-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedStudentAssociationsEmploymentTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedStudentAssociationsEmploymentTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed employment types
     * Get a list of allowed employment types for student organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedStudentAssociationsEmploymentTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedStudentAssociationsEmploymentTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed employment types
     * Get a list of allowed employment types for student organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedStudentAssociationsEmploymentTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedStudentAssociationsEmploymentTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed employment types (asynchronously)
     * Get a list of allowed employment types for student organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedStudentAssociationsEmploymentTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedStudentAssociationsEmploymentTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedTitlesTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedTitlesTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-titles-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedTitlesTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedTitlesTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the titles property
     * Get a list of classifications that can be used when submitting a title.
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedTitlesTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedTitlesTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the titles property
     * Get a list of classifications that can be used when submitting a title.
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedTitlesTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedTitlesTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the titles property (asynchronously)
     * Get a list of classifications that can be used when submitting a title.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedTitlesTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedTitlesTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedVisitingScholarAssociationsEmploymentTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedVisitingScholarAssociationsEmploymentTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/allowed-visiting-scholar-organization-associations-employment-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedVisitingScholarAssociationsEmploymentTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedVisitingScholarAssociationsEmploymentTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed employment types
     * Get a list of allowed employment types for visiting scholar organisation associations on persons
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedVisitingScholarAssociationsEmploymentTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedVisitingScholarAssociationsEmploymentTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed employment types
     * Get a list of allowed employment types for visiting scholar organisation associations on persons
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedVisitingScholarAssociationsEmploymentTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedVisitingScholarAssociationsEmploymentTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed employment types (asynchronously)
     * Get a list of allowed employment types for visiting scholar organisation associations on persons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedVisitingScholarAssociationsEmploymentTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedVisitingScholarAssociationsEmploymentTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param uuid UUID of the person (required)
     * @param fileId File id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(UUID uuid, String fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{uuid}/files/{fileId}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(UUID uuid, String fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }
        

        okhttp3.Call localVarCall = getFileCall(uuid, fileId, _callback);
        return localVarCall;

    }

    /**
     * Get file from the person
     * Get file from the person
     * @param uuid UUID of the person (required)
     * @param fileId File id  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public File getFile(UUID uuid, String fileId) throws ApiException {
        ApiResponse<File> localVarResp = getFileWithHttpInfo(uuid, fileId);
        return localVarResp.getData();
    }

    /**
     * Get file from the person
     * Get file from the person
     * @param uuid UUID of the person (required)
     * @param fileId File id  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getFileWithHttpInfo(UUID uuid, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(uuid, fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file from the person (asynchronously)
     * Get file from the person
     * @param uuid UUID of the person (required)
     * @param fileId File id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(UUID uuid, String fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(uuid, fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHighlightedContent
     * @param uuid UUID of the owner (person) of the highlighted content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHighlightedContentCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{uuid}/highlighted-content"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHighlightedContentValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getHighlightedContent(Async)");
        }
        

        okhttp3.Call localVarCall = getHighlightedContentCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * Get highlighted content
     * Get highlighted content for the person with the specific UUID. Highlights are only available for editorial types
     * @param uuid UUID of the owner (person) of the highlighted content (required)
     * @return HighlightedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public HighlightedContent getHighlightedContent(UUID uuid) throws ApiException {
        ApiResponse<HighlightedContent> localVarResp = getHighlightedContentWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Get highlighted content
     * Get highlighted content for the person with the specific UUID. Highlights are only available for editorial types
     * @param uuid UUID of the owner (person) of the highlighted content (required)
     * @return ApiResponse&lt;HighlightedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HighlightedContent> getHighlightedContentWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = getHighlightedContentValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<HighlightedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get highlighted content (asynchronously)
     * Get highlighted content for the person with the specific UUID. Highlights are only available for editorial types
     * @param uuid UUID of the owner (person) of the highlighted content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHighlightedContentAsync(UUID uuid, final ApiCallback<HighlightedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHighlightedContentValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<HighlightedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderingsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/orderings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getOrderingsCall(_callback);
        return localVarCall;

    }

    /**
     * Lists available orderings
     * Lists all orderings available to the person endpoint. These values can be used by the order parameter.
     * @return OrderingsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderingsList getOrderings() throws ApiException {
        ApiResponse<OrderingsList> localVarResp = getOrderingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Lists available orderings
     * Lists all orderings available to the person endpoint. These values can be used by the order parameter.
     * @return ApiResponse&lt;OrderingsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderingsList> getOrderingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrderingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrderingsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available orderings (asynchronously)
     * Lists all orderings available to the person endpoint. These values can be used by the order parameter.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderingsAsync(final ApiCallback<OrderingsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrderingsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for list
     * @param size Number of returned persons per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from getPersonOrderings (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCall(Integer size, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer size, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCall(size, offset, order, _callback);
        return localVarCall;

    }

    /**
     * Lists all persons
     * Lists all persons in the Pure instance. If you need to filter the persons returned, see the POST version which supports additional filtering.
     * @param size Number of returned persons per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from getPersonOrderings (optional)
     * @return PersonListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public PersonListResult list(Integer size, Integer offset, String order) throws ApiException {
        ApiResponse<PersonListResult> localVarResp = listWithHttpInfo(size, offset, order);
        return localVarResp.getData();
    }

    /**
     * Lists all persons
     * Lists all persons in the Pure instance. If you need to filter the persons returned, see the POST version which supports additional filtering.
     * @param size Number of returned persons per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from getPersonOrderings (optional)
     * @return ApiResponse&lt;PersonListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonListResult> listWithHttpInfo(Integer size, Integer offset, String order) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(size, offset, order, null);
        Type localVarReturnType = new TypeToken<PersonListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all persons (asynchronously)
     * Lists all persons in the Pure instance. If you need to filter the persons returned, see the POST version which supports additional filtering.
     * @param size Number of returned persons per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from getPersonOrderings (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAsync(Integer size, Integer offset, String order, final ApiCallback<PersonListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(size, offset, order, _callback);
        Type localVarReturnType = new TypeToken<PersonListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNotes
     * @param uuid UUID of the person to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> person not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNotesCall(UUID uuid, Integer size, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{uuid}/notes"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNotesValidateBeforeCall(UUID uuid, Integer size, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling listNotes(Async)");
        }
        

        okhttp3.Call localVarCall = listNotesCall(uuid, size, offset, _callback);
        return localVarCall;

    }

    /**
     * Lists notes
     * Lists notes associated with an person ordered by date (nulls last)
     * @param uuid UUID of the person to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @return NoteListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> person not found </td><td>  -  </td></tr>
     </table>
     */
    public NoteListResult listNotes(UUID uuid, Integer size, Integer offset) throws ApiException {
        ApiResponse<NoteListResult> localVarResp = listNotesWithHttpInfo(uuid, size, offset);
        return localVarResp.getData();
    }

    /**
     * Lists notes
     * Lists notes associated with an person ordered by date (nulls last)
     * @param uuid UUID of the person to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @return ApiResponse&lt;NoteListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> person not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NoteListResult> listNotesWithHttpInfo(UUID uuid, Integer size, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listNotesValidateBeforeCall(uuid, size, offset, null);
        Type localVarReturnType = new TypeToken<NoteListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists notes (asynchronously)
     * Lists notes associated with an person ordered by date (nulls last)
     * @param uuid UUID of the person to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> person not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNotesAsync(UUID uuid, Integer size, Integer offset, final ApiCallback<NoteListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNotesValidateBeforeCall(uuid, size, offset, _callback);
        Type localVarReturnType = new TypeToken<NoteListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for query
     * @param personsQuery The query to perform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryCall(PersonsQuery personsQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = personsQuery;

        // create path and map variables
        String localVarPath = "/persons/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryValidateBeforeCall(PersonsQuery personsQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personsQuery' is set
        if (personsQuery == null) {
            throw new ApiException("Missing the required parameter 'personsQuery' when calling query(Async)");
        }
        

        okhttp3.Call localVarCall = queryCall(personsQuery, _callback);
        return localVarCall;

    }

    /**
     * Query operation for persons
     * Lists persons in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     * @param personsQuery The query to perform (required)
     * @return PersonListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public PersonListResult query(PersonsQuery personsQuery) throws ApiException {
        ApiResponse<PersonListResult> localVarResp = queryWithHttpInfo(personsQuery);
        return localVarResp.getData();
    }

    /**
     * Query operation for persons
     * Lists persons in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     * @param personsQuery The query to perform (required)
     * @return ApiResponse&lt;PersonListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonListResult> queryWithHttpInfo(PersonsQuery personsQuery) throws ApiException {
        okhttp3.Call localVarCall = queryValidateBeforeCall(personsQuery, null);
        Type localVarReturnType = new TypeToken<PersonListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query operation for persons (asynchronously)
     * Lists persons in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     * @param personsQuery The query to perform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsync(PersonsQuery personsQuery, final ApiCallback<PersonListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryValidateBeforeCall(personsQuery, _callback);
        Type localVarReturnType = new TypeToken<PersonListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supervisee
     * @param uuid UUID of the person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call superviseeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{uuid}/supervisee"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call superviseeValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling supervisee(Async)");
        }
        

        okhttp3.Call localVarCall = superviseeCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * person supervisees
     * Find supervisees of a person by their specific UUID.
     * @param uuid UUID of the person (required)
     * @return PersonSuperviseeAssociationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public PersonSuperviseeAssociationListResult supervisee(UUID uuid) throws ApiException {
        ApiResponse<PersonSuperviseeAssociationListResult> localVarResp = superviseeWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * person supervisees
     * Find supervisees of a person by their specific UUID.
     * @param uuid UUID of the person (required)
     * @return ApiResponse&lt;PersonSuperviseeAssociationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonSuperviseeAssociationListResult> superviseeWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = superviseeValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<PersonSuperviseeAssociationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * person supervisees (asynchronously)
     * Find supervisees of a person by their specific UUID.
     * @param uuid UUID of the person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call superviseeAsync(UUID uuid, final ApiCallback<PersonSuperviseeAssociationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = superviseeValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<PersonSuperviseeAssociationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param uuid UUID of the person to update (required)
     * @param person The content to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(UUID uuid, Person person, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = person;

        // create path and map variables
        String localVarPath = "/persons/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(UUID uuid, Person person, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling update(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling update(Async)");
        }
        

        okhttp3.Call localVarCall = updateCall(uuid, person, _callback);
        return localVarCall;

    }

    /**
     * Update person
     * Update person with specific UUID.
     * @param uuid UUID of the person to update (required)
     * @param person The content to update (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Person update(UUID uuid, Person person) throws ApiException {
        ApiResponse<Person> localVarResp = updateWithHttpInfo(uuid, person);
        return localVarResp.getData();
    }

    /**
     * Update person
     * Update person with specific UUID.
     * @param uuid UUID of the person to update (required)
     * @param person The content to update (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> updateWithHttpInfo(UUID uuid, Person person) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(uuid, person, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update person (asynchronously)
     * Update person with specific UUID.
     * @param uuid UUID of the person to update (required)
     * @param person The content to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(UUID uuid, Person person, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(uuid, person, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHighlightedContent
     * @param uuid UUID of the person to update highlighted content for (required)
     * @param highlightedContent The highlighted content references to set on the person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHighlightedContentCall(UUID uuid, HighlightedContent highlightedContent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = highlightedContent;

        // create path and map variables
        String localVarPath = "/persons/{uuid}/highlighted-content"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHighlightedContentValidateBeforeCall(UUID uuid, HighlightedContent highlightedContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateHighlightedContent(Async)");
        }
        
        // verify the required parameter 'highlightedContent' is set
        if (highlightedContent == null) {
            throw new ApiException("Missing the required parameter 'highlightedContent' when calling updateHighlightedContent(Async)");
        }
        

        okhttp3.Call localVarCall = updateHighlightedContentCall(uuid, highlightedContent, _callback);
        return localVarCall;

    }

    /**
     * Update highlighted content
     * Update highlighted content references. Add an empty array of references for a content type to not highlight any items of this type. Types that are not present will be ignored. Highlights can only be updated for editorial types
     * @param uuid UUID of the person to update highlighted content for (required)
     * @param highlightedContent The highlighted content references to set on the person (required)
     * @return HighlightedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public HighlightedContent updateHighlightedContent(UUID uuid, HighlightedContent highlightedContent) throws ApiException {
        ApiResponse<HighlightedContent> localVarResp = updateHighlightedContentWithHttpInfo(uuid, highlightedContent);
        return localVarResp.getData();
    }

    /**
     * Update highlighted content
     * Update highlighted content references. Add an empty array of references for a content type to not highlight any items of this type. Types that are not present will be ignored. Highlights can only be updated for editorial types
     * @param uuid UUID of the person to update highlighted content for (required)
     * @param highlightedContent The highlighted content references to set on the person (required)
     * @return ApiResponse&lt;HighlightedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HighlightedContent> updateHighlightedContentWithHttpInfo(UUID uuid, HighlightedContent highlightedContent) throws ApiException {
        okhttp3.Call localVarCall = updateHighlightedContentValidateBeforeCall(uuid, highlightedContent, null);
        Type localVarReturnType = new TypeToken<HighlightedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update highlighted content (asynchronously)
     * Update highlighted content references. Add an empty array of references for a content type to not highlight any items of this type. Types that are not present will be ignored. Highlights can only be updated for editorial types
     * @param uuid UUID of the person to update highlighted content for (required)
     * @param highlightedContent The highlighted content references to set on the person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHighlightedContentAsync(UUID uuid, HighlightedContent highlightedContent, final ApiCallback<HighlightedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHighlightedContentValidateBeforeCall(uuid, highlightedContent, _callback);
        Type localVarReturnType = new TypeToken<HighlightedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
