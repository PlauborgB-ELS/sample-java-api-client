/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.api;

import com.elsevier.pure.api.sample.stubs.invoker.ApiCallback;
import com.elsevier.pure.api.sample.stubs.invoker.ApiClient;
import com.elsevier.pure.api.sample.stubs.invoker.ApiException;
import com.elsevier.pure.api.sample.stubs.invoker.ApiResponse;
import com.elsevier.pure.api.sample.stubs.invoker.Configuration;
import com.elsevier.pure.api.sample.stubs.invoker.Pair;
import com.elsevier.pure.api.sample.stubs.invoker.ProgressRequestBody;
import com.elsevier.pure.api.sample.stubs.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.elsevier.pure.api.sample.stubs.model.ClassificationRefList;
import com.elsevier.pure.api.sample.stubs.model.ContentRefListResult;
import com.elsevier.pure.api.sample.stubs.model.DisciplinesAssociation;
import com.elsevier.pure.api.sample.stubs.model.DisciplinesAssociationListResult;
import com.elsevier.pure.api.sample.stubs.model.DisciplinesAssociationsQuery;
import com.elsevier.pure.api.sample.stubs.model.DisciplinesDisciplineListResult;
import com.elsevier.pure.api.sample.stubs.model.DisciplinesDisciplineSchemeListResult;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganization;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationList;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationListResult;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationRefList;
import com.elsevier.pure.api.sample.stubs.model.ExternalOrganizationsQuery;
import java.io.File;
import com.elsevier.pure.api.sample.stubs.model.KeywordGroupConfigurationList;
import com.elsevier.pure.api.sample.stubs.model.LocalesList;
import com.elsevier.pure.api.sample.stubs.model.Note;
import com.elsevier.pure.api.sample.stubs.model.NoteListResult;
import com.elsevier.pure.api.sample.stubs.model.OrderingsList;
import com.elsevier.pure.api.sample.stubs.model.ProblemDetails;
import java.util.UUID;
import com.elsevier.pure.api.sample.stubs.model.UploadedFile;
import com.elsevier.pure.api.sample.stubs.model.WorkflowListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExternalOrganizationApi {
    private ApiClient localVarApiClient;

    public ExternalOrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalOrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for create
     * @param externalOrganization The content to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(ExternalOrganization externalOrganization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalOrganization;

        // create path and map variables
        String localVarPath = "/external-organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(ExternalOrganization externalOrganization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'externalOrganization' is set
        if (externalOrganization == null) {
            throw new ApiException("Missing the required parameter 'externalOrganization' when calling create(Async)");
        }
        

        okhttp3.Call localVarCall = createCall(externalOrganization, _callback);
        return localVarCall;

    }

    /**
     * Create external organization
     * Create external organization
     * @param externalOrganization The content to create (required)
     * @return ExternalOrganization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganization create(ExternalOrganization externalOrganization) throws ApiException {
        ApiResponse<ExternalOrganization> localVarResp = createWithHttpInfo(externalOrganization);
        return localVarResp.getData();
    }

    /**
     * Create external organization
     * Create external organization
     * @param externalOrganization The content to create (required)
     * @return ApiResponse&lt;ExternalOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganization> createWithHttpInfo(ExternalOrganization externalOrganization) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(externalOrganization, null);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create external organization (asynchronously)
     * Create external organization
     * @param externalOrganization The content to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(ExternalOrganization externalOrganization, final ApiCallback<ExternalOrganization> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(externalOrganization, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNote
     * @param uuid UUID of the external organization to add note to (required)
     * @param note The note to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNoteCall(UUID uuid, Note note, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = note;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}/notes"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNoteValidateBeforeCall(UUID uuid, Note note, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createNote(Async)");
        }
        
        // verify the required parameter 'note' is set
        if (note == null) {
            throw new ApiException("Missing the required parameter 'note' when calling createNote(Async)");
        }
        

        okhttp3.Call localVarCall = createNoteCall(uuid, note, _callback);
        return localVarCall;

    }

    /**
     * Create note
     * Create note and associate it with an external organization
     * @param uuid UUID of the external organization to add note to (required)
     * @param note The note to create (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Note createNote(UUID uuid, Note note) throws ApiException {
        ApiResponse<Note> localVarResp = createNoteWithHttpInfo(uuid, note);
        return localVarResp.getData();
    }

    /**
     * Create note
     * Create note and associate it with an external organization
     * @param uuid UUID of the external organization to add note to (required)
     * @param note The note to create (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> createNoteWithHttpInfo(UUID uuid, Note note) throws ApiException {
        okhttp3.Call localVarCall = createNoteValidateBeforeCall(uuid, note, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create note (asynchronously)
     * Create note and associate it with an external organization
     * @param uuid UUID of the external organization to add note to (required)
     * @param note The note to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNoteAsync(UUID uuid, Note note, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNoteValidateBeforeCall(uuid, note, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param uuid UUID of the external organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * Delete external organization
     * Delete external organization with specific UUID.
     * @param uuid UUID of the external organization (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void delete(UUID uuid) throws ApiException {
        deleteWithHttpInfo(uuid);
    }

    /**
     * Delete external organization
     * Delete external organization with specific UUID.
     * @param uuid UUID of the external organization (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete external organization (asynchronously)
     * Delete external organization with specific UUID.
     * @param uuid UUID of the external organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dependents
     * @param uuid UUID of the external organization to update (required)
     * @param verbose Default: false. Setting this to true will add links and names to the output but will also have an impact on performance. Use with coution. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dependentsCall(UUID uuid, Boolean verbose, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}/dependents"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (verbose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verbose", verbose));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dependentsValidateBeforeCall(UUID uuid, Boolean verbose, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling dependents(Async)");
        }
        

        okhttp3.Call localVarCall = dependentsCall(uuid, verbose, _callback);
        return localVarCall;

    }

    /**
     * Lists all dependents to the external organization
     * Lists all dependents to the external organization with the specified UUID. If the user dont have access to view all the dependent content, an authorization error will be thrown. 
     * @param uuid UUID of the external organization to update (required)
     * @param verbose Default: false. Setting this to true will add links and names to the output but will also have an impact on performance. Use with coution. (optional, default to false)
     * @return ContentRefListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentRefListResult dependents(UUID uuid, Boolean verbose) throws ApiException {
        ApiResponse<ContentRefListResult> localVarResp = dependentsWithHttpInfo(uuid, verbose);
        return localVarResp.getData();
    }

    /**
     * Lists all dependents to the external organization
     * Lists all dependents to the external organization with the specified UUID. If the user dont have access to view all the dependent content, an authorization error will be thrown. 
     * @param uuid UUID of the external organization to update (required)
     * @param verbose Default: false. Setting this to true will add links and names to the output but will also have an impact on performance. Use with coution. (optional, default to false)
     * @return ApiResponse&lt;ContentRefListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentRefListResult> dependentsWithHttpInfo(UUID uuid, Boolean verbose) throws ApiException {
        okhttp3.Call localVarCall = dependentsValidateBeforeCall(uuid, verbose, null);
        Type localVarReturnType = new TypeToken<ContentRefListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all dependents to the external organization (asynchronously)
     * Lists all dependents to the external organization with the specified UUID. If the user dont have access to view all the dependent content, an authorization error will be thrown. 
     * @param uuid UUID of the external organization to update (required)
     * @param verbose Default: false. Setting this to true will add links and names to the output but will also have an impact on performance. Use with coution. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dependentsAsync(UUID uuid, Boolean verbose, final ApiCallback<ContentRefListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dependentsValidateBeforeCall(uuid, verbose, _callback);
        Type localVarReturnType = new TypeToken<ContentRefListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileUploads
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileUploadsCall(File body, String contentType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/external-organizations/file-uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileUploadsValidateBeforeCall(File body, String contentType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileUploads(Async)");
        }
        

        okhttp3.Call localVarCall = fileUploadsCall(body, contentType, _callback);
        return localVarCall;

    }

    /**
     * Upload file to a specific external organization
     * Uploads file for the external organization
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @return UploadedFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public UploadedFile fileUploads(File body, String contentType) throws ApiException {
        ApiResponse<UploadedFile> localVarResp = fileUploadsWithHttpInfo(body, contentType);
        return localVarResp.getData();
    }

    /**
     * Upload file to a specific external organization
     * Uploads file for the external organization
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @return ApiResponse&lt;UploadedFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedFile> fileUploadsWithHttpInfo(File body, String contentType) throws ApiException {
        okhttp3.Call localVarCall = fileUploadsValidateBeforeCall(body, contentType, null);
        Type localVarReturnType = new TypeToken<UploadedFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload file to a specific external organization (asynchronously)
     * Uploads file for the external organization
     * @param body  (required)
     * @param contentType Set the mime type for the file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileUploadsAsync(File body, String contentType, final ApiCallback<UploadedFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileUploadsValidateBeforeCall(body, contentType, _callback);
        Type localVarReturnType = new TypeToken<UploadedFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param uuid UUID of the desired external organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * Get external organization
     * Get external organization with specific UUID.
     * @param uuid UUID of the desired external organization (required)
     * @return ExternalOrganization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganization get(UUID uuid) throws ApiException {
        ApiResponse<ExternalOrganization> localVarResp = getWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Get external organization
     * Get external organization with specific UUID.
     * @param uuid UUID of the desired external organization (required)
     * @return ApiResponse&lt;ExternalOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganization> getWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get external organization (asynchronously)
     * Get external organization with specific UUID.
     * @param uuid UUID of the desired external organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> The requested content have changed UUID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(UUID uuid, final ApiCallback<ExternalOrganization> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAddressCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressCountriesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-address-countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAddressCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAddressCountriesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed address countries
     * Get a list of allowed countries that can be used for the &#39;address.country&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAddressCountries() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAddressCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed address countries
     * Get a list of allowed countries that can be used for the &#39;address.country&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAddressCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAddressCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed address countries (asynchronously)
     * Get a list of allowed countries that can be used for the &#39;address.country&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressCountriesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAddressCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedAddressSubdivisions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressSubdivisionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-address-subdivision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedAddressSubdivisionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedAddressSubdivisionsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed address subdivisions
     * Get a list of allowed subdivisions that can be used for the &#39;address.subdivisions&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedAddressSubdivisions() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedAddressSubdivisionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed address subdivisions
     * Get a list of allowed subdivisions that can be used for the &#39;address.subdivisions&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedAddressSubdivisionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedAddressSubdivisionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed address subdivisions (asynchronously)
     * Get a list of allowed subdivisions that can be used for the &#39;address.subdivisions&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedAddressSubdivisionsAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedAddressSubdivisionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedClassifiedIdentifierTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedClassifiedIdentifierTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-classified-identifier-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedClassifiedIdentifierTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedClassifiedIdentifierTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classified identifier types
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedClassifiedIdentifierTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedClassifiedIdentifierTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classified identifier types
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedClassifiedIdentifierTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedClassifiedIdentifierTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classified identifier types (asynchronously)
     * Get a list of allowed classified identifier types that can be used for the &#39;identifiers.type&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedClassifiedIdentifierTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedClassifiedIdentifierTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedClassifiedImageTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedClassifiedImageTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-classified-file-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedClassifiedImageTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedClassifiedImageTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed classified identifier types
     * Get a list of allowed classified image types that can be used for the &#39;images.type&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedClassifiedImageTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedClassifiedImageTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed classified identifier types
     * Get a list of allowed classified image types that can be used for the &#39;images.type&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedClassifiedImageTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedClassifiedImageTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classified identifier types (asynchronously)
     * Get a list of allowed classified image types that can be used for the &#39;images.type&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedClassifiedImageTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedClassifiedImageTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedDisciplineSchemes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDisciplineSchemesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/disciplines/allowed-discipline-schemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedDisciplineSchemesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedDisciplineSchemesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed discipline schemes
     * Get a list fo a allowed discipline schemes for external organizations
     * @return DisciplinesDisciplineSchemeListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DisciplinesDisciplineSchemeListResult getAllowedDisciplineSchemes() throws ApiException {
        ApiResponse<DisciplinesDisciplineSchemeListResult> localVarResp = getAllowedDisciplineSchemesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed discipline schemes
     * Get a list fo a allowed discipline schemes for external organizations
     * @return ApiResponse&lt;DisciplinesDisciplineSchemeListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisciplinesDisciplineSchemeListResult> getAllowedDisciplineSchemesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedDisciplineSchemesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DisciplinesDisciplineSchemeListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed discipline schemes (asynchronously)
     * Get a list fo a allowed discipline schemes for external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDisciplineSchemesAsync(final ApiCallback<DisciplinesDisciplineSchemeListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedDisciplineSchemesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DisciplinesDisciplineSchemeListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedDisciplines
     * @param disciplineScheme Identifier for the discipline scheme for external organizations (required)
     * @param size Number of returned disciplines per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDisciplinesCall(String disciplineScheme, Integer size, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/disciplines/{discipline-scheme}/allowed-disciplines"
            .replaceAll("\\{" + "discipline-scheme" + "\\}", localVarApiClient.escapeString(disciplineScheme.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedDisciplinesValidateBeforeCall(String disciplineScheme, Integer size, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'disciplineScheme' is set
        if (disciplineScheme == null) {
            throw new ApiException("Missing the required parameter 'disciplineScheme' when calling getAllowedDisciplines(Async)");
        }
        

        okhttp3.Call localVarCall = getAllowedDisciplinesCall(disciplineScheme, size, offset, _callback);
        return localVarCall;

    }

    /**
     * A list of allowed disciplines for a specific discipline scheme
     * Get a list of a allowed disciplines for specific discipline scheme for external organizations
     * @param disciplineScheme Identifier for the discipline scheme for external organizations (required)
     * @param size Number of returned disciplines per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @return DisciplinesDisciplineListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DisciplinesDisciplineListResult getAllowedDisciplines(String disciplineScheme, Integer size, Integer offset) throws ApiException {
        ApiResponse<DisciplinesDisciplineListResult> localVarResp = getAllowedDisciplinesWithHttpInfo(disciplineScheme, size, offset);
        return localVarResp.getData();
    }

    /**
     * A list of allowed disciplines for a specific discipline scheme
     * Get a list of a allowed disciplines for specific discipline scheme for external organizations
     * @param disciplineScheme Identifier for the discipline scheme for external organizations (required)
     * @param size Number of returned disciplines per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @return ApiResponse&lt;DisciplinesDisciplineListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisciplinesDisciplineListResult> getAllowedDisciplinesWithHttpInfo(String disciplineScheme, Integer size, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAllowedDisciplinesValidateBeforeCall(disciplineScheme, size, offset, null);
        Type localVarReturnType = new TypeToken<DisciplinesDisciplineListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed disciplines for a specific discipline scheme (asynchronously)
     * Get a list of a allowed disciplines for specific discipline scheme for external organizations
     * @param disciplineScheme Identifier for the discipline scheme for external organizations (required)
     * @param size Number of returned disciplines per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDisciplinesAsync(String disciplineScheme, Integer size, Integer offset, final ApiCallback<DisciplinesDisciplineListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedDisciplinesValidateBeforeCall(disciplineScheme, size, offset, _callback);
        Type localVarReturnType = new TypeToken<DisciplinesDisciplineListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedDocumentLicenses
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDocumentLicensesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-document-licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedDocumentLicensesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedDocumentLicensesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed document licenses
     * Get a list of allowed document licenses that can be used for the &#39;documents.license&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedDocumentLicenses() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedDocumentLicensesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed document licenses
     * Get a list of allowed document licenses that can be used for the &#39;documents.license&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedDocumentLicensesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedDocumentLicensesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed document licenses (asynchronously)
     * Get a list of allowed document licenses that can be used for the &#39;documents.license&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDocumentLicensesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedDocumentLicensesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedDocumentTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDocumentTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-document-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedDocumentTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedDocumentTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed document types
     * Get a list of allowed document types that can be used for the &#39;documents.type&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedDocumentTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedDocumentTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed document types
     * Get a list of allowed document types that can be used for the &#39;documents.type&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedDocumentTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedDocumentTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed document types (asynchronously)
     * Get a list of allowed document types that can be used for the &#39;documents.type&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedDocumentTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedDocumentTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedKeywordGroupConfigurationClassifications
     * @param id Pure id of the keyword group configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationClassificationsCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-keyword-group-configurations/{id}/classifications"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedKeywordGroupConfigurationClassificationsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAllowedKeywordGroupConfigurationClassifications(Async)");
        }
        

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationClassificationsCall(id, _callback);
        return localVarCall;

    }

    /**
     * A list of allowed classifications for the specified keyword group
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     * @param id Pure id of the keyword group configuration (required)
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedKeywordGroupConfigurationClassifications(Long id) throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedKeywordGroupConfigurationClassificationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * A list of allowed classifications for the specified keyword group
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     * @param id Pure id of the keyword group configuration (required)
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedKeywordGroupConfigurationClassificationsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationClassificationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed classifications for the specified keyword group (asynchronously)
     * Get a list of allowed classifications that can be used when submitting a specified keyword group.
     * @param id Pure id of the keyword group configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationClassificationsAsync(Long id, final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationClassificationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedKeywordGroupConfigurations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-keyword-group-configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedKeywordGroupConfigurationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of keyword group configurations
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     * @return KeywordGroupConfigurationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordGroupConfigurationList getAllowedKeywordGroupConfigurations() throws ApiException {
        ApiResponse<KeywordGroupConfigurationList> localVarResp = getAllowedKeywordGroupConfigurationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of keyword group configurations
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     * @return ApiResponse&lt;KeywordGroupConfigurationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordGroupConfigurationList> getAllowedKeywordGroupConfigurationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordGroupConfigurationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of keyword group configurations (asynchronously)
     * Get a list of allowed keyword group configurations that can be used when submitting keyword groups.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedKeywordGroupConfigurationsAsync(final ApiCallback<KeywordGroupConfigurationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedKeywordGroupConfigurationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordGroupConfigurationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedLinkTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLinkTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-link-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedLinkTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedLinkTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed link types
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedLinkTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedLinkTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed link types
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedLinkTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedLinkTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed link types (asynchronously)
     * Get a list of allowed link types that can be used for the &#39;links.linkType&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLinkTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedLinkTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedLocales
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLocalesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-locales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedLocalesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedLocalesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed locales in localized strings
     * Get a list of allowed locales that can be used when submitting localized string entities.
     * @return LocalesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public LocalesList getAllowedLocales() throws ApiException {
        ApiResponse<LocalesList> localVarResp = getAllowedLocalesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed locales in localized strings
     * Get a list of allowed locales that can be used when submitting localized string entities.
     * @return ApiResponse&lt;LocalesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocalesList> getAllowedLocalesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedLocalesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LocalesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed locales in localized strings (asynchronously)
     * Get a list of allowed locales that can be used when submitting localized string entities.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedLocalesAsync(final ApiCallback<LocalesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedLocalesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LocalesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedNatureTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedNatureTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-nature-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedNatureTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedNatureTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed nature types
     * Get a list of allowed nature types that can be used for the &#39;natureTypes&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedNatureTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedNatureTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed nature types
     * Get a list of allowed nature types that can be used for the &#39;natureTypes&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedNatureTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedNatureTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed nature types (asynchronously)
     * Get a list of allowed nature types that can be used for the &#39;natureTypes&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedNatureTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedNatureTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedTypesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed external organization types
     * Get a list of allowed types that can be used for the &#39;type&#39; attribute of external organizations
     * @return ClassificationRefList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationRefList getAllowedTypes() throws ApiException {
        ApiResponse<ClassificationRefList> localVarResp = getAllowedTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed external organization types
     * Get a list of allowed types that can be used for the &#39;type&#39; attribute of external organizations
     * @return ApiResponse&lt;ClassificationRefList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationRefList> getAllowedTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed external organization types (asynchronously)
     * Get a list of allowed types that can be used for the &#39;type&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedTypesAsync(final ApiCallback<ClassificationRefList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClassificationRefList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowedWorkflowSteps
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedWorkflowStepsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/allowed-workflow-steps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedWorkflowStepsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowedWorkflowStepsCall(_callback);
        return localVarCall;

    }

    /**
     * A list of allowed workflow steps
     * Get a list of allowed workflow steps that can be used for the &#39;workflow&#39; attribute of external organizations
     * @return WorkflowListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowListResult getAllowedWorkflowSteps() throws ApiException {
        ApiResponse<WorkflowListResult> localVarResp = getAllowedWorkflowStepsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of allowed workflow steps
     * Get a list of allowed workflow steps that can be used for the &#39;workflow&#39; attribute of external organizations
     * @return ApiResponse&lt;WorkflowListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowListResult> getAllowedWorkflowStepsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowedWorkflowStepsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WorkflowListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of allowed workflow steps (asynchronously)
     * Get a list of allowed workflow steps that can be used for the &#39;workflow&#39; attribute of external organizations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowedWorkflowStepsAsync(final ApiCallback<WorkflowListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedWorkflowStepsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WorkflowListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDisciplineAssociation
     * @param uuid UUID of the desired external organization (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisciplineAssociationCall(UUID uuid, String disciplineScheme, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}/disciplines/{discipline-scheme}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "discipline-scheme" + "\\}", localVarApiClient.escapeString(disciplineScheme.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisciplineAssociationValidateBeforeCall(UUID uuid, String disciplineScheme, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getDisciplineAssociation(Async)");
        }
        
        // verify the required parameter 'disciplineScheme' is set
        if (disciplineScheme == null) {
            throw new ApiException("Missing the required parameter 'disciplineScheme' when calling getDisciplineAssociation(Async)");
        }
        

        okhttp3.Call localVarCall = getDisciplineAssociationCall(uuid, disciplineScheme, _callback);
        return localVarCall;

    }

    /**
     * Get disciplines from the discipline scheme associated with the external organization
     * Get disciplines from the discipline scheme associated with the external organization with specific UUID.
     * @param uuid UUID of the desired external organization (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @return DisciplinesAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public DisciplinesAssociation getDisciplineAssociation(UUID uuid, String disciplineScheme) throws ApiException {
        ApiResponse<DisciplinesAssociation> localVarResp = getDisciplineAssociationWithHttpInfo(uuid, disciplineScheme);
        return localVarResp.getData();
    }

    /**
     * Get disciplines from the discipline scheme associated with the external organization
     * Get disciplines from the discipline scheme associated with the external organization with specific UUID.
     * @param uuid UUID of the desired external organization (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @return ApiResponse&lt;DisciplinesAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisciplinesAssociation> getDisciplineAssociationWithHttpInfo(UUID uuid, String disciplineScheme) throws ApiException {
        okhttp3.Call localVarCall = getDisciplineAssociationValidateBeforeCall(uuid, disciplineScheme, null);
        Type localVarReturnType = new TypeToken<DisciplinesAssociation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get disciplines from the discipline scheme associated with the external organization (asynchronously)
     * Get disciplines from the discipline scheme associated with the external organization with specific UUID.
     * @param uuid UUID of the desired external organization (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisciplineAssociationAsync(UUID uuid, String disciplineScheme, final ApiCallback<DisciplinesAssociation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisciplineAssociationValidateBeforeCall(uuid, disciplineScheme, _callback);
        Type localVarReturnType = new TypeToken<DisciplinesAssociation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param uuid UUID of the external organization (required)
     * @param fileId File id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(UUID uuid, String fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}/files/{fileId}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(UUID uuid, String fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }
        

        okhttp3.Call localVarCall = getFileCall(uuid, fileId, _callback);
        return localVarCall;

    }

    /**
     * Get file from the external organization
     * Get file from the external organization
     * @param uuid UUID of the external organization (required)
     * @param fileId File id  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public File getFile(UUID uuid, String fileId) throws ApiException {
        ApiResponse<File> localVarResp = getFileWithHttpInfo(uuid, fileId);
        return localVarResp.getData();
    }

    /**
     * Get file from the external organization
     * Get file from the external organization
     * @param uuid UUID of the external organization (required)
     * @param fileId File id  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getFileWithHttpInfo(UUID uuid, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(uuid, fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file from the external organization (asynchronously)
     * Get file from the external organization
     * @param uuid UUID of the external organization (required)
     * @param fileId File id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(UUID uuid, String fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(uuid, fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderingsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/orderings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getOrderingsCall(_callback);
        return localVarCall;

    }

    /**
     * Lists available orderings
     * Lists all orderings available to the external organization endpoint. These values can be used by the order parameter.
     * @return OrderingsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderingsList getOrderings() throws ApiException {
        ApiResponse<OrderingsList> localVarResp = getOrderingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Lists available orderings
     * Lists all orderings available to the external organization endpoint. These values can be used by the order parameter.
     * @return ApiResponse&lt;OrderingsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderingsList> getOrderingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrderingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrderingsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available orderings (asynchronously)
     * Lists all orderings available to the external organization endpoint. These values can be used by the order parameter.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderingsAsync(final ApiCallback<OrderingsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrderingsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for list
     * @param size Number of returned external organizations per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from externalOrganization_getOrderings (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCall(Integer size, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer size, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCall(size, offset, order, _callback);
        return localVarCall;

    }

    /**
     * Lists all external organizations
     * Lists all external organizations in the Pure instance. If you need to filter the external organizations returned, see the POST version which supports additional filtering.
     * @param size Number of returned external organizations per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from externalOrganization_getOrderings (optional)
     * @return ExternalOrganizationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganizationListResult list(Integer size, Integer offset, String order) throws ApiException {
        ApiResponse<ExternalOrganizationListResult> localVarResp = listWithHttpInfo(size, offset, order);
        return localVarResp.getData();
    }

    /**
     * Lists all external organizations
     * Lists all external organizations in the Pure instance. If you need to filter the external organizations returned, see the POST version which supports additional filtering.
     * @param size Number of returned external organizations per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from externalOrganization_getOrderings (optional)
     * @return ApiResponse&lt;ExternalOrganizationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganizationListResult> listWithHttpInfo(Integer size, Integer offset, String order) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(size, offset, order, null);
        Type localVarReturnType = new TypeToken<ExternalOrganizationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all external organizations (asynchronously)
     * Lists all external organizations in the Pure instance. If you need to filter the external organizations returned, see the POST version which supports additional filtering.
     * @param size Number of returned external organizations per request. (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param order The order of the list, must be a value from externalOrganization_getOrderings (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAsync(Integer size, Integer offset, String order, final ApiCallback<ExternalOrganizationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(size, offset, order, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganizationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDisciplineAssociations
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociationsQuery The query to perform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDisciplineAssociationsCall(String disciplineScheme, DisciplinesAssociationsQuery disciplinesAssociationsQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = disciplinesAssociationsQuery;

        // create path and map variables
        String localVarPath = "/external-organizations/disciplines/{discipline-scheme}/search"
            .replaceAll("\\{" + "discipline-scheme" + "\\}", localVarApiClient.escapeString(disciplineScheme.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDisciplineAssociationsValidateBeforeCall(String disciplineScheme, DisciplinesAssociationsQuery disciplinesAssociationsQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'disciplineScheme' is set
        if (disciplineScheme == null) {
            throw new ApiException("Missing the required parameter 'disciplineScheme' when calling listDisciplineAssociations(Async)");
        }
        
        // verify the required parameter 'disciplinesAssociationsQuery' is set
        if (disciplinesAssociationsQuery == null) {
            throw new ApiException("Missing the required parameter 'disciplinesAssociationsQuery' when calling listDisciplineAssociations(Async)");
        }
        

        okhttp3.Call localVarCall = listDisciplineAssociationsCall(disciplineScheme, disciplinesAssociationsQuery, _callback);
        return localVarCall;

    }

    /**
     * Query operation for disciplines associated with external organizations
     * Lists disciplines from the discipline scheme associated with external organizations in the Pure instance that matches the provided query.
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociationsQuery The query to perform (required)
     * @return DisciplinesAssociationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public DisciplinesAssociationListResult listDisciplineAssociations(String disciplineScheme, DisciplinesAssociationsQuery disciplinesAssociationsQuery) throws ApiException {
        ApiResponse<DisciplinesAssociationListResult> localVarResp = listDisciplineAssociationsWithHttpInfo(disciplineScheme, disciplinesAssociationsQuery);
        return localVarResp.getData();
    }

    /**
     * Query operation for disciplines associated with external organizations
     * Lists disciplines from the discipline scheme associated with external organizations in the Pure instance that matches the provided query.
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociationsQuery The query to perform (required)
     * @return ApiResponse&lt;DisciplinesAssociationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisciplinesAssociationListResult> listDisciplineAssociationsWithHttpInfo(String disciplineScheme, DisciplinesAssociationsQuery disciplinesAssociationsQuery) throws ApiException {
        okhttp3.Call localVarCall = listDisciplineAssociationsValidateBeforeCall(disciplineScheme, disciplinesAssociationsQuery, null);
        Type localVarReturnType = new TypeToken<DisciplinesAssociationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query operation for disciplines associated with external organizations (asynchronously)
     * Lists disciplines from the discipline scheme associated with external organizations in the Pure instance that matches the provided query.
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociationsQuery The query to perform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDisciplineAssociationsAsync(String disciplineScheme, DisciplinesAssociationsQuery disciplinesAssociationsQuery, final ApiCallback<DisciplinesAssociationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDisciplineAssociationsValidateBeforeCall(disciplineScheme, disciplinesAssociationsQuery, _callback);
        Type localVarReturnType = new TypeToken<DisciplinesAssociationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNotes
     * @param uuid UUID of the external organization to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNotesCall(UUID uuid, Integer size, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}/notes"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNotesValidateBeforeCall(UUID uuid, Integer size, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling listNotes(Async)");
        }
        

        okhttp3.Call localVarCall = listNotesCall(uuid, size, offset, _callback);
        return localVarCall;

    }

    /**
     * Lists notes
     * Lists notes associated with an external organization ordered by date (nulls last)
     * @param uuid UUID of the external organization to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @return NoteListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External organization not found </td><td>  -  </td></tr>
     </table>
     */
    public NoteListResult listNotes(UUID uuid, Integer size, Integer offset) throws ApiException {
        ApiResponse<NoteListResult> localVarResp = listNotesWithHttpInfo(uuid, size, offset);
        return localVarResp.getData();
    }

    /**
     * Lists notes
     * Lists notes associated with an external organization ordered by date (nulls last)
     * @param uuid UUID of the external organization to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @return ApiResponse&lt;NoteListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External organization not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NoteListResult> listNotesWithHttpInfo(UUID uuid, Integer size, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listNotesValidateBeforeCall(uuid, size, offset, null);
        Type localVarReturnType = new TypeToken<NoteListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists notes (asynchronously)
     * Lists notes associated with an external organization ordered by date (nulls last)
     * @param uuid UUID of the external organization to get notes for (required)
     * @param size Number of returned notes per request (optional, default to 10)
     * @param offset The offset for the returned list. 0 or null value is from the start (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> External organization not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNotesAsync(UUID uuid, Integer size, Integer offset, final ApiCallback<NoteListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNotesValidateBeforeCall(uuid, size, offset, _callback);
        Type localVarReturnType = new TypeToken<NoteListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merge
     * @param externalOrganizationRefList References to the entities to merge. The first will be the target. All additional entities will be merged into the target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeCall(ExternalOrganizationRefList externalOrganizationRefList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalOrganizationRefList;

        // create path and map variables
        String localVarPath = "/external-organizations/merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeValidateBeforeCall(ExternalOrganizationRefList externalOrganizationRefList, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'externalOrganizationRefList' is set
        if (externalOrganizationRefList == null) {
            throw new ApiException("Missing the required parameter 'externalOrganizationRefList' when calling merge(Async)");
        }
        

        okhttp3.Call localVarCall = mergeCall(externalOrganizationRefList, _callback);
        return localVarCall;

    }

    /**
     * Merge external organizations
     * Merge a list of external organizations together. Note that this operation is irreversible
     * @param externalOrganizationRefList References to the entities to merge. The first will be the target. All additional entities will be merged into the target. (required)
     * @return ExternalOrganization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganization merge(ExternalOrganizationRefList externalOrganizationRefList) throws ApiException {
        ApiResponse<ExternalOrganization> localVarResp = mergeWithHttpInfo(externalOrganizationRefList);
        return localVarResp.getData();
    }

    /**
     * Merge external organizations
     * Merge a list of external organizations together. Note that this operation is irreversible
     * @param externalOrganizationRefList References to the entities to merge. The first will be the target. All additional entities will be merged into the target. (required)
     * @return ApiResponse&lt;ExternalOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganization> mergeWithHttpInfo(ExternalOrganizationRefList externalOrganizationRefList) throws ApiException {
        okhttp3.Call localVarCall = mergeValidateBeforeCall(externalOrganizationRefList, null);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge external organizations (asynchronously)
     * Merge a list of external organizations together. Note that this operation is irreversible
     * @param externalOrganizationRefList References to the entities to merge. The first will be the target. All additional entities will be merged into the target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeAsync(ExternalOrganizationRefList externalOrganizationRefList, final ApiCallback<ExternalOrganization> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeValidateBeforeCall(externalOrganizationRefList, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewDeduplication
     * @param externalOrganizationList The content to deduplicate. The data do not need to exist in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewDeduplicationCall(ExternalOrganizationList externalOrganizationList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalOrganizationList;

        // create path and map variables
        String localVarPath = "/external-organizations/preview-deduplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewDeduplicationValidateBeforeCall(ExternalOrganizationList externalOrganizationList, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'externalOrganizationList' is set
        if (externalOrganizationList == null) {
            throw new ApiException("Missing the required parameter 'externalOrganizationList' when calling previewDeduplication(Async)");
        }
        

        okhttp3.Call localVarCall = previewDeduplicationCall(externalOrganizationList, _callback);
        return localVarCall;

    }

    /**
     * Preview deduplication of external organizations
     * Runs through a list external organizations and returns the deduplicated and merged organizations. The operation does not touch the Pure database
     * @param externalOrganizationList The content to deduplicate. The data do not need to exist in the database. (required)
     * @return ExternalOrganizationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganizationListResult previewDeduplication(ExternalOrganizationList externalOrganizationList) throws ApiException {
        ApiResponse<ExternalOrganizationListResult> localVarResp = previewDeduplicationWithHttpInfo(externalOrganizationList);
        return localVarResp.getData();
    }

    /**
     * Preview deduplication of external organizations
     * Runs through a list external organizations and returns the deduplicated and merged organizations. The operation does not touch the Pure database
     * @param externalOrganizationList The content to deduplicate. The data do not need to exist in the database. (required)
     * @return ApiResponse&lt;ExternalOrganizationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganizationListResult> previewDeduplicationWithHttpInfo(ExternalOrganizationList externalOrganizationList) throws ApiException {
        okhttp3.Call localVarCall = previewDeduplicationValidateBeforeCall(externalOrganizationList, null);
        Type localVarReturnType = new TypeToken<ExternalOrganizationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview deduplication of external organizations (asynchronously)
     * Runs through a list external organizations and returns the deduplicated and merged organizations. The operation does not touch the Pure database
     * @param externalOrganizationList The content to deduplicate. The data do not need to exist in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewDeduplicationAsync(ExternalOrganizationList externalOrganizationList, final ApiCallback<ExternalOrganizationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewDeduplicationValidateBeforeCall(externalOrganizationList, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganizationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDisciplineAssociation
     * @param uuid UUID of the external organization to update (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociation The disciplines association to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDisciplineAssociationCall(UUID uuid, String disciplineScheme, DisciplinesAssociation disciplinesAssociation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = disciplinesAssociation;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}/disciplines/{discipline-scheme}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "discipline-scheme" + "\\}", localVarApiClient.escapeString(disciplineScheme.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDisciplineAssociationValidateBeforeCall(UUID uuid, String disciplineScheme, DisciplinesAssociation disciplinesAssociation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling putDisciplineAssociation(Async)");
        }
        
        // verify the required parameter 'disciplineScheme' is set
        if (disciplineScheme == null) {
            throw new ApiException("Missing the required parameter 'disciplineScheme' when calling putDisciplineAssociation(Async)");
        }
        
        // verify the required parameter 'disciplinesAssociation' is set
        if (disciplinesAssociation == null) {
            throw new ApiException("Missing the required parameter 'disciplinesAssociation' when calling putDisciplineAssociation(Async)");
        }
        

        okhttp3.Call localVarCall = putDisciplineAssociationCall(uuid, disciplineScheme, disciplinesAssociation, _callback);
        return localVarCall;

    }

    /**
     * Update disciplines from the discipline scheme associated with the external organization
     * Update disciplines from the discipline scheme associated with the external organization with specific UUID.
     * @param uuid UUID of the external organization to update (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociation The disciplines association to create (required)
     * @return DisciplinesAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public DisciplinesAssociation putDisciplineAssociation(UUID uuid, String disciplineScheme, DisciplinesAssociation disciplinesAssociation) throws ApiException {
        ApiResponse<DisciplinesAssociation> localVarResp = putDisciplineAssociationWithHttpInfo(uuid, disciplineScheme, disciplinesAssociation);
        return localVarResp.getData();
    }

    /**
     * Update disciplines from the discipline scheme associated with the external organization
     * Update disciplines from the discipline scheme associated with the external organization with specific UUID.
     * @param uuid UUID of the external organization to update (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociation The disciplines association to create (required)
     * @return ApiResponse&lt;DisciplinesAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisciplinesAssociation> putDisciplineAssociationWithHttpInfo(UUID uuid, String disciplineScheme, DisciplinesAssociation disciplinesAssociation) throws ApiException {
        okhttp3.Call localVarCall = putDisciplineAssociationValidateBeforeCall(uuid, disciplineScheme, disciplinesAssociation, null);
        Type localVarReturnType = new TypeToken<DisciplinesAssociation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update disciplines from the discipline scheme associated with the external organization (asynchronously)
     * Update disciplines from the discipline scheme associated with the external organization with specific UUID.
     * @param uuid UUID of the external organization to update (required)
     * @param disciplineScheme Identifier for the discipline scheme (required)
     * @param disciplinesAssociation The disciplines association to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDisciplineAssociationAsync(UUID uuid, String disciplineScheme, DisciplinesAssociation disciplinesAssociation, final ApiCallback<DisciplinesAssociation> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDisciplineAssociationValidateBeforeCall(uuid, disciplineScheme, disciplinesAssociation, _callback);
        Type localVarReturnType = new TypeToken<DisciplinesAssociation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for query
     * @param externalOrganizationsQuery The query to perform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryCall(ExternalOrganizationsQuery externalOrganizationsQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalOrganizationsQuery;

        // create path and map variables
        String localVarPath = "/external-organizations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryValidateBeforeCall(ExternalOrganizationsQuery externalOrganizationsQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'externalOrganizationsQuery' is set
        if (externalOrganizationsQuery == null) {
            throw new ApiException("Missing the required parameter 'externalOrganizationsQuery' when calling query(Async)");
        }
        

        okhttp3.Call localVarCall = queryCall(externalOrganizationsQuery, _callback);
        return localVarCall;

    }

    /**
     * Query operation for external organizations
     * Lists external organizations in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     * @param externalOrganizationsQuery The query to perform (required)
     * @return ExternalOrganizationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganizationListResult query(ExternalOrganizationsQuery externalOrganizationsQuery) throws ApiException {
        ApiResponse<ExternalOrganizationListResult> localVarResp = queryWithHttpInfo(externalOrganizationsQuery);
        return localVarResp.getData();
    }

    /**
     * Query operation for external organizations
     * Lists external organizations in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     * @param externalOrganizationsQuery The query to perform (required)
     * @return ApiResponse&lt;ExternalOrganizationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganizationListResult> queryWithHttpInfo(ExternalOrganizationsQuery externalOrganizationsQuery) throws ApiException {
        okhttp3.Call localVarCall = queryValidateBeforeCall(externalOrganizationsQuery, null);
        Type localVarReturnType = new TypeToken<ExternalOrganizationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query operation for external organizations (asynchronously)
     * Lists external organizations in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     * @param externalOrganizationsQuery The query to perform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryAsync(ExternalOrganizationsQuery externalOrganizationsQuery, final ApiCallback<ExternalOrganizationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryValidateBeforeCall(externalOrganizationsQuery, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganizationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param uuid UUID of the external organization to update (required)
     * @param externalOrganization The content to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(UUID uuid, ExternalOrganization externalOrganization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalOrganization;

        // create path and map variables
        String localVarPath = "/external-organizations/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(UUID uuid, ExternalOrganization externalOrganization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling update(Async)");
        }
        
        // verify the required parameter 'externalOrganization' is set
        if (externalOrganization == null) {
            throw new ApiException("Missing the required parameter 'externalOrganization' when calling update(Async)");
        }
        

        okhttp3.Call localVarCall = updateCall(uuid, externalOrganization, _callback);
        return localVarCall;

    }

    /**
     * Update external organization
     * Update external organization with specific UUID.
     * @param uuid UUID of the external organization to update (required)
     * @param externalOrganization The content to update (required)
     * @return ExternalOrganization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ExternalOrganization update(UUID uuid, ExternalOrganization externalOrganization) throws ApiException {
        ApiResponse<ExternalOrganization> localVarResp = updateWithHttpInfo(uuid, externalOrganization);
        return localVarResp.getData();
    }

    /**
     * Update external organization
     * Update external organization with specific UUID.
     * @param uuid UUID of the external organization to update (required)
     * @param externalOrganization The content to update (required)
     * @return ApiResponse&lt;ExternalOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalOrganization> updateWithHttpInfo(UUID uuid, ExternalOrganization externalOrganization) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(uuid, externalOrganization, null);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update external organization (asynchronously)
     * Update external organization with specific UUID.
     * @param uuid UUID of the external organization to update (required)
     * @param externalOrganization The content to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(UUID uuid, ExternalOrganization externalOrganization, final ApiCallback<ExternalOrganization> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(uuid, externalOrganization, _callback);
        Type localVarReturnType = new TypeToken<ExternalOrganization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
