/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.model;

import java.util.Objects;
import java.util.Arrays;
import com.elsevier.pure.api.sample.stubs.model.AccessDefinitionAllowedField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The field filters applicable for a system name
 */
@ApiModel(description = "The field filters applicable for a system name")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-28T22:49:29.739+02:00[Europe/Copenhagen]")
public class AccessDefinitionSystemNameFieldFilter {
  public static final String SERIALIZED_NAME_PURE_ID = "pureId";
  @SerializedName(SERIALIZED_NAME_PURE_ID)
  private Long pureId;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public static final String SERIALIZED_NAME_ALLOWED_FIELDS = "allowedFields";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FIELDS)
  private List<AccessDefinitionAllowedField> allowedFields = null;

  public static final String SERIALIZED_NAME_ALLOW_ALL = "allowAll";
  @SerializedName(SERIALIZED_NAME_ALLOW_ALL)
  private Boolean allowAll;

  /**
   * Field Access value
   */
  @JsonAdapter(AccessEnumEnum.Adapter.class)
  public enum AccessEnumEnum {
    READ("READ"),
    
    READ_AND_MODIFY("READ_AND_MODIFY");

    private String value;

    AccessEnumEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnumEnum fromValue(String value) {
      for (AccessEnumEnum b : AccessEnumEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnumEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnumEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnumEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnumEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_ENUM = "accessEnum";
  @SerializedName(SERIALIZED_NAME_ACCESS_ENUM)
  private AccessEnumEnum accessEnum;


   /**
   * Pure database ID of the object, prefer using the UUID if it is present on the entity
   * @return pureId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pure database ID of the object, prefer using the UUID if it is present on the entity")

  public Long getPureId() {
    return pureId;
  }




  public AccessDefinitionSystemNameFieldFilter systemName(String systemName) {
    
    this.systemName = systemName;
    return this;
  }

   /**
   * systemName
   * @return systemName
  **/
  @ApiModelProperty(required = true, value = "systemName")

  public String getSystemName() {
    return systemName;
  }


  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }


  public AccessDefinitionSystemNameFieldFilter allowedFields(List<AccessDefinitionAllowedField> allowedFields) {
    
    this.allowedFields = allowedFields;
    return this;
  }

  public AccessDefinitionSystemNameFieldFilter addAllowedFieldsItem(AccessDefinitionAllowedField allowedFieldsItem) {
    if (this.allowedFields == null) {
      this.allowedFields = new ArrayList<AccessDefinitionAllowedField>();
    }
    this.allowedFields.add(allowedFieldsItem);
    return this;
  }

   /**
   * List of allowed properties
   * @return allowedFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of allowed properties")

  public List<AccessDefinitionAllowedField> getAllowedFields() {
    return allowedFields;
  }


  public void setAllowedFields(List<AccessDefinitionAllowedField> allowedFields) {
    this.allowedFields = allowedFields;
  }


  public AccessDefinitionSystemNameFieldFilter allowAll(Boolean allowAll) {
    
    this.allowAll = allowAll;
    return this;
  }

   /**
   * allowAll
   * @return allowAll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "allowAll")

  public Boolean getAllowAll() {
    return allowAll;
  }


  public void setAllowAll(Boolean allowAll) {
    this.allowAll = allowAll;
  }


  public AccessDefinitionSystemNameFieldFilter accessEnum(AccessEnumEnum accessEnum) {
    
    this.accessEnum = accessEnum;
    return this;
  }

   /**
   * Field Access value
   * @return accessEnum
  **/
  @ApiModelProperty(required = true, value = "Field Access value")

  public AccessEnumEnum getAccessEnum() {
    return accessEnum;
  }


  public void setAccessEnum(AccessEnumEnum accessEnum) {
    this.accessEnum = accessEnum;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessDefinitionSystemNameFieldFilter accessDefinitionSystemNameFieldFilter = (AccessDefinitionSystemNameFieldFilter) o;
    return Objects.equals(this.pureId, accessDefinitionSystemNameFieldFilter.pureId) &&
        Objects.equals(this.systemName, accessDefinitionSystemNameFieldFilter.systemName) &&
        Objects.equals(this.allowedFields, accessDefinitionSystemNameFieldFilter.allowedFields) &&
        Objects.equals(this.allowAll, accessDefinitionSystemNameFieldFilter.allowAll) &&
        Objects.equals(this.accessEnum, accessDefinitionSystemNameFieldFilter.accessEnum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pureId, systemName, allowedFields, allowAll, accessEnum);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessDefinitionSystemNameFieldFilter {\n");
    sb.append("    pureId: ").append(toIndentedString(pureId)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("    allowedFields: ").append(toIndentedString(allowedFields)).append("\n");
    sb.append("    allowAll: ").append(toIndentedString(allowAll)).append("\n");
    sb.append("    accessEnum: ").append(toIndentedString(accessEnum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

